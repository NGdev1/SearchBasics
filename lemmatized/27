   простой   система   событие   на   с   11   общий   статья   программирование   игра   новость   статья   код   арт   дизайн   индустрия   подсказка   термин   faq   страница   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум   работа   входить   программированиестатьиобщий   простой   система   событие   на   с   11   автор   0r   nge   при   проектирование   свой   игра   программа   система   мы   стараться   как   можно   много   следовать   принцип   srp   single   responsibility   principle   1   то   быть   каждый   сущность   инкапсулировать   в   себя   один   конкретный   обязанность   и   очень   замечательно   если   получаться   избегать   прямой   общение   сущность   между   себя   однако   в   геймдев   этот   пора   бывать   сложно   добиваться   и   некоторый   сущность   хотеться   бы   давать   возможность   мгновенный   реагирование   на   тот   или   иной   событие   8   это   можно   решать   например   использовать   паттерн   observer   2   однако   данный   паттерн   не   очень   удобный   в   первый   очередь   то   что   приходиться   использовать   множественный   наследование   а   так   же   включать   заголовочный   файл   класс   слушатель   хотеться   решать   задача   более   чистый   способ   и   тут   мы   приходить   к   идея   событие   events   3   в   целое   идея   не   новый   и   в   тот   или   иной   вид   использоваться   давно   и   много   кто   частный   случай   событийный   система   система   сигнал   слот   который   хоть   и   избавлять   мы   от   множественный   наследование   однако   все   же   требовать   некоторый   знание   о   слушатель   мы   же   с   вы   рассматривать   чистый   система   событие   events   system   не   требовать   знание   о   то   кто   быть   источник   получатель   нащий   событие   и   быть   ли   таковой   вообще   то   быть   посылать   событие   вообще   ничто   не   знать   о   то   куда   они   уходить   и   что   с   этот   информация   быть   делать   эдакий   система   коллбек   80   го   уровень   до   недавний   время   для   построение   такой   система   требоваться   включение   тяжелый   библиотека   а   ля   boost   и   целый   ворох   макрос   с   появление   стандарт   с   11   жить   становиться   просто   и   теперь   реализовать   такой   система   можно   в   пара   десяток   строчка   чистый   с   код   примечание   расмотренный   ниже   система   использоваться   автор   в   несколько   небольшой   домашний   проект   и   полностью   удовлетворять   оное   как   скорость   так   и   удобство   если   вы   захотеть   использовать   приводить   код   в   свой   проект   помнить   автор   не   нести   никакой   ответственность   за   вред   срыв   срок   кранча   увольнение   причененный   данный   код   использовать   на   свой   страх   и   риск   и   с   благословление   близкий   к   вы   церковь   наш   событийный   система   базироваться   на   2   х   фич   новый   с   11   стандарт   std   function   и   variadic   templates   предполагаться   у   читатель   базовый   знание   о   с   11   и   данный   его   фич   std   function   4   это   практически   клон   boost   function   и   в   свой   очередь   являться   высокоуровневый   обертка   над   функция   и   функтор   для   захват   метод   класс   мы   быть   использовать   std   bind   variadic   templates   или   parameters   pack   5   фич   который   многий   включая   я   давно   ждать   и   который   приходить   из   замечательный   язык   d   где   ее   возможность   еще   широко   суть   данный   фич   в   то   чтобы   шаблон   мочь   принимать   переменный   количество   аргумент   типичный   пример   variadic   template   std   tuple   контейнер   фиксированный   размер   способный   содержать   элемент   различный   тип   template   typename   params   class   tuple   для   распаковка   аргумент   быть   вводить   оператор   троеточие   при   это   весь   разделительный   запятая   быть   проставлять   автоматически   кто   пробовать   реализовать   потодобно   на   макрос   знать   сколько   код   приходиться   писать   для   это   для   то   чтобы   узнавать   количество   аргумент   быть   вводить   оператор   sizeof   теперь   переходить   к   деталь   реализация   главный   класс   eventsystem   держать   весь   зарегистрировать   событие   в   контейнер   тип   std   unordered _ map   так   как   частый   вставка   удаление   не   планироваться   но   мы   нужный   быстрый   выборка   по   ключ   данный   класс   являться   синглтон   singleton   6   основной   4   метод   класс   весь   шаблонный   в   качество   шаблонный   параметр   принимать   специальный   структура   описатель   событие   eventtrait   registerevent   регистрировать   событие   в   система   событие   subscribetoevent   подписывать   объект   на   событие   в   качество   параметр   принимать   указатель   на   объект   класс   и   метод   класс   который   быть   реагировать   на   событие   unsibscribefromevent   отписывать   объект   от   событие   в   качество   параметр   принимать   указатель   на   объект   класс   raiseevent   вызывать   событие   по   цепочка   быть   оповещать   весь   подписываться   весь   получать   аргумент   быть   передавать   подписчик   за   это   отвечать   std   forward   для   визуальный   красота   рекомендоваться   пользоваться   функция   помощник   ev   register _ event   ev   subscribe _ event   ev   unsunscribe _ event   ev   raise _ event   для   хранение   событие   в   контейнер   весь   событие   наследоваться   от   общий   абстрактный   класс   basicevent   не   иметь   метод   класс   specevent   являться   специализированный   шаблонный   класс   для   событие   специализатор   для   он   являться   все   тот   же   структура   описатель   eventtrait   основной   метод   bind   производить   захват   метод   класс   и   указатель   на   объект   класс   и   сохранять   они   в   список   подписчик   unbind   удалять   объект   класс   из   список   слушатель   call   вызывать   по   цепочка   сохранять   метод   класс   слушатель   передавать   они   аргумент   для   то   чтобы   не   терять   аттрибут   аргумент   особенно   для   ссылочный   аргумент   использоваться   move   семантика   7   как   уже   говориться   ранее   для   захват   метод   класс   использоваться   std   bind   который   вернуть   полноценный   объект   фунция   использование   std   bind   необходимо   так   же   для   захват   первый   неявный   параметр   метод   функция   указатель   на   объект   класс   для   то   чтобы   опускать   захват   остальной   аргумент   мы   использовать   т   н   placeholders   8   и   все   бы   хорошо   однако   мы   в   момент   биндинг   должный   передавать   определенный   количество   плейсхолдер   можно   конечно   написать   специализированный   биндинг   функция   для   каждый   количество   аргумент   а   можно   использовать   возможность   variadic   templates   для   это   написать   свой   последовательность   заглушка   использовать   самописный   аналог   integer _ sequence   из   c   14   реализация   подсматривать   в   http   loungecpp   wikidot   com   tips   and   tricks   3aindices   template   std   size _ t   is   struct   indices   template   std   size _ t   n   std   size _ t   is   struct   build _ indices   build _ indices   n   1   n   1   is   template   std   size _ t   is   struct   build _ indices   0   is   indices   is   placeholders   generator   declaration   template   std   size _ t   n   struct   placeholders _ generator   теперь   мы   нужно   заставлять   std   bind   принимать   наш   заглушка   как   плейсхолдер   для   это   специализировать   std   is _ placeholder   namespace   std   template   std   size _ t   n   struct   is _ placeholder   ev   detail   placeholders _ generator   n   std   integral _ constant   std   size _ t   n   1   namespace   std   n   1   здесь   нужный   чтобы   последовательность   всегда   стартовать   от   1   а   не   от   0   и   теперь   рассматривать   тот   самый   структура   описатель   событие   eventtrait   для   каждый   событие   она   должный   быть   свой   и   так   как   в   с   нет   аналог   mixins   из   d   то   здесь   приходиться   использовать   пережиток   коммунизм   макрос   define   declare _ event _ trait   eventtrait   struct   eventtrait   typedef   std   tuple  __ va _ args __  paramstuple   typedef   std   function   void  __ va _ args __
   delegatetype   static   const   std   size _ t   numargs   std   tuple _ size   paramstuple   value   namespace   ev   template   const   char   get _ event _ trait _ name   eventtrait   return   eventtrait   данный   структура   определять   тип   std   tuple   способный   хранить   в   себя   аргумент   событие   в   данный   реализация   не   использоваться   сделать   как   задеть   на   будущее   для   реализация   некий   подобие   rpc   так   же   структура   определять   тип   std   function   способный   хранить   захватить   метод   структура   так   же   хранить   в   себя   количество   аргумент   для   событие   использоваться   для   compile   time   проверка   и   оповещение   программист   чтобы   можно   быть   быстро   понимать   суть   ошибка   а   не   читать   простыня   template   hell   static _ assert   eventtrait   numargs   sizeof   args   incorrect   arguments   number   функция   get _ event _ trait _ name   eventtrait   возвращать   имя   сруктура   описатель   использоваться   так   же   для   построение   хеш   ключ   для   хранение   событие   в   unordered _ map   ну   и   наконец   пример   использование   пример   надуманный   сделать   лишь   для   демонстрация   в   реальный   проект   ссылочный   аргумент   хорошо   не   использовать   а   передавать   весь   объект   и   изменять   он   в   метод   подписчик   include   eventsys   h   declare _ event _ trait   event _ gameobjectmoved   float   float   unsigned   int   struct   gameobject   float   posx   posy   unsigned   int   levelhash   void   setpos   const   float   x   const   float   y   posx   x   posy   y   ev   raise _ event   event _ gameobjectmoved   posx   posy   levelhash   struct   gamelevel   void   globalpos2levelhash   const   float   globx   const   float   globy   unsigned   int   outhash   unsigned   int   lvlx   static _ cast   int   std   floorf   globx   2   unsigned   int   lvly   static _ cast   int   std   floorf   globy   2   outhash   lvly   0xffff   16   lvlx   0xffff   void   initialize   ev   subscribe _ event   event _ gameobjectmoved   this   gamelevel   globalpos2levelhash   void   deinitialize   ev   unsubscribe _ event   event _ gameobjectmoved   this   void   registergameevents   ev   register _ event   event _ gameobjectmoved   int   main   int   char   registergameevents   gamelevel   level   level   initialize   gameobject   hero   hero   levelhash   0   hero   setpos   1037   0f   576   0f   this   should   trigger   level   globalpos2levelhash   level   deinitialize   hero   setpos   576   0f   1037   0f   this   should   not   trigger   level   globalpos2levelhash   return   0   полный   исходный   код   https   bitbucket   org   iorange   eventsystem   src   полезный   ссылочка   1   https   en   wikipedia   org   wiki   single _ responsibility _ principle   2   https   en   wikipedia   org   wiki   observer _ pattern   3   https   en   wikipedia   org   wiki   event   driven _ programming   4   http   www   cplusplus   com   reference   functional   function   5   http   en   cppreference   com   w   cpp   language   parameter _ pack   6   https   en   wikipedia   org   wiki   singleton _ pattern   7   http   www   cprogramming   com   c   11   rvalue   references   and   move   sema   in   c   11   html   8   http   www   cplusplus   com   reference   functional   placeholders   c   gamedev   2   декабрь   2015   комментарий   107   убирать   реклама   контакт   сообщество   участник   каталог   сайт   категория   архив   новость   gamedev   ru   разработка   игра   2001   2019