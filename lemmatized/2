   angelscript   общий   статья   программирование   игра   новость   статья   код   арт   дизайн   индустрия   подсказка   термин   faq   страница   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум   работа   входить   программированиестатьиобщий   angelscript   автор   константин   гиляровский   в   данный   статья   я   хотеться   бы   показывать   почему   я   понравиться   скриптовый   язык   angelscript   когда   я   выбирать   язык   для   свой   движок   я   просматривать   множество   кандидатура   и   для   подробный   рассмотрение   выбирать   два   скриптовый   язык   они   быть   lua   и   python   введение   превивать   особенность   проблема   регистрация   перегружать   функция   регистрация   перегружать   метод   получение   адрес   на   переменный   объявлять   в   класс   полезный   ссылка   введение   в   процесс   рассмотрение   lua   и   python   я   выделять   для   себя   что   lua   являться   достаточно   быстрый   но   с   немного   непривычный   синтаксис   python   же   обладать   очень   простой   синтаксис   и   масса   полезный   библиотека   но   к   сожаление   он   оказываться   довольно   медленный   и   он   довольно   тяжело   привязывать   к   с   и   тут   на   работа   я   подсказывать   использовать   angelscript   мол   он   удобный   для   связка   быстро   lua   и   иметь   с   подобный   синтаксис   как   только   я   начинать   он   изучать   я   понимать   что   это   тот   самый   скриптовый   язык   мой   мечта   превивать   вот   что   можно   прочитывать   про   этот   язык   на   википедия   angelscript   представлять   себя   движок   в   который   приложение   мочь   регистрировать   функция   свойство   и   тип   который   мочь   использоваться   в   скрипт   скрипт   компилироваться   в   модуль   количество   использовать   модуль   варьрироваться   в   зависимость   от   нужда   приложение   мочь   также   использовать   различный   интерфейс   для   каждый   модуль   с   помощь   группа   конфигурация   это   особенно   полезный   когда   приложение   работать   с   несколько   тип   скрипт   например   gui   ai   и   т   д   программа   hello   world   в   простой   случай   выглядеть   так   void   main   print   hello   world   n   да   синтаксис   язык   радовать   с   самый   начало   язык   поддерживать   как   метод   функциональный   программирование   так   и   ооп   с   самый   начало   он   подкупать   свой   простота   регистрация   функция   переменный   тип   например   регистрация   глобальный   переменная   g _ engine   registerglobalproperty   int   someval   someval   где   someval   это   переменный   тип   int   регистрация   глобальный   функция   g _ engine   registerglobalfunction   void   print   string   val   asfunction   print   ascall _ cdecl   void   print   string   val   cout   val   data   да   для   angelscript   не   нужно   писать   функция   биндинг   что   являться   огроменный   плюс   в   сравнение   с   другой   язык   для   регистрация   свой   тип   приходиться   написать   парочка   функция   фабрика   для   создание   экземпляр   и   счетчик   ссылка   для   тип   тип   ссылка   и   вызов   конструктор   и   деструктор   для   объект   тип   тип   значение   например   у   мы   быть   класс   float3   который   мы   хотеть   бы   зарегистрировать   класс   счетчик   ссылка   class   refc   private   int   refc   public   refc   refc   1   void   addref   refc   void   release   if   refc   delete   this   класс   который   мы   хотеть   зарегистрировать   class   float3   public   refc   public   float   x   float   y   float   z   float3   x   y   z   0   void   normalize   float   len   sqrt   x   x   y   y   z   z   len   len   len   1   x   len   y   len   z   len   фабрика   float3   float3factorye   return   new   float3   функция   вывод   на   экран   void   printf3   float3   val   cout   x   val   x   y   val   y   z   val   z   для   это   мы   регистрировать   объект   как   тип   ссылка   и   указывать   он   фабрика   счетчик   ссылка   метод   и   функция   вывод   данные   на   экран   и   вот   как   это   выглядеть   g _ engine   registerobjecttype   float3   0   asobj _ ref   g _ engine   registerobjectmethod   float3   void   normalize   asmethod   float3   normalize   ascall _ thiscall   g _ engine   registerobjectbehaviour   float3   asbehave _ factory   float3   new _ float3   asfunction   float3factorye   ascall _ cdecl   g _ engine   registerobjectbehaviour   float3   asbehave _ addref   void   addref   asmethod   float3   addref   ascall _ thiscall   g _ engine   registerobjectbehaviour   float3   asbehave _ release   void   release   asmethod   float3   release   ascall _ thiscall   g _ engine   registerglobalfunction   void   print   float3   val   asfunction   printf3   ascall _ cdecl   мы   на   это   конечно   же   не   останавливаться   так   как   мы   нужный   доступ   к   значение   xyz   поэтому   они   мы   тоже   должный   зарегистрировать   что   мы   и   делать   написать   g _ engine   registerobjectproperty   float3   float   x   offsetof   float3   x   g _ engine   registerobjectproperty   float3   float   y   offsetof   float3   y   g _ engine   registerobjectproperty   float3   float   z   offsetof   float3   z   все   предельно   простой   и   понятно   теперь   в   скрипт   можно   написать   float3   objpos   objpos   x   1   objpos   y   2   objpos   z   3   objpos   normalize   print   objpos   выполнять   этот   скрипт   мы   увидеть   на   экран   значение   нормализовать   вектор   особенность   я   очень   порадовать   возможность   перегрузка   оператор   в   angelscript   в   с   для   это   существовать   ключевой   слово   operator   и   символ   оператор   angelscript   для   это   использовать   определенный   функция   вот   полный   список   соответствие   opneg   opcom   oppreinc   oppredec   oppostinc   oppostdec   opequals   opequals   opcmp   opcmp   opcmp   opcmp   opassign   opaddassign   opsubassign   opmulassign   opdivassign   opandassign   oporassign   opxorassign   opmodassign   opshlassign   opshrassign   opushrassign   opadd   opadd _ r   opsub   opsub _ r   opmul   opmul _ r   opdiv   opdiv _ r   opmod   opmod _ r   opand   opand _ r   opor   opor _ r   opxor   opxor _ r   opshl   opshl _ r   opshr   opshr _ r   opushr   opushr _ r   opindex   допускать   мы   хотеть   сделать   возможность   чтобы   наш   вектор   поддерживать   прибавление   к   себя   другой   вектор   для   это   слегка   модифицировать   наш   класс   class   float3   public   refc   public   float   x   float   y   float   z   float3   x   y   z   0   void   normalize   float   len   sqrt   x   x   y   y   z   z   len   len   len   1   x   len   y   len   z   len   float3   operator   float3  _ rval   x  _ rval   x   y  _ rval   y   z  _ rval   z   this   addref   return   this   оставаться   только   зарегистрировать   новый   метод   g _ engine   registerobjectmethod   float3   float3   opaddassign   float3  _ rval   asmethod   float3   operator   ascall _ thiscall   и   теперь   можно   спокойно   писать   так   float3   objpos   objpos   x   1   objpos   y   2   objpos   z   3   float3   objoffset   objoffset   x   3   objoffset   y   1   objoffset   z   5   objpos   objoffset   print   objpos   и   мы   увидеть   на   экран   x   4   y   3   z   8   angelscript   поддерживать   свойство   выглядеть   это   так   class   myobj   type   get _ valuename   type   set _ valuename   type   val   myobj   a   type   tmp   a   valuename   вызываться   get _ valuename   a   valuename   tmp   вызываться   set _ valuename   также   свойство   поддерживаться   для   оператор   индекс   class   myobj   float   get _ opindex   int   idx   void   set _ opindex   int   idx   float   value   myobj   a   float   val   a   1   вызываться   get _ opindex   a   2   val   вызываться   set _ opindex   проблема   во   время   изучение   язык   angelscript   появляться   несколько   проблема   решение   который   отнимать   у   я   довольно   много   время   вот   список   проблема   о   который   я   хотеть   бы   рассказывать   регистрация   перегружать   функция   регистрация   перегружать   метод   получение   адрес   на   переменный   объявлять   в   класс   регистрация   перегружать   функция   очень   часто   возникать   необходимость   объявлять   перегружать   функция   для   удобство   чтение   и   понимание   код   например   void   print   string   val   cout   val   data   void   print   int   val   cout   val   void   print   float   val   cout   val   void   print   float3   val   cout   x   val   x   y   val   y   z   val   z   обычный   регистрация   вызывать   ошибка   g _ engine   registerglobalfunction   void   print   string   val   asfunction   print   ascall _ cdecl   ошибка   так   как   компилятор   не   понимать   адрес   какой   из   четыре   функция   нужно   передавать   то   на   ум   приходить   два   решение   создавать   typedef   нужный   функция   и   осуществлять   приведение   тип   создавать   переменный   указатель   на   нужный   функция   и   передавать   он   вот   как   выглядеть   второй   решение   void   prints   string   val   print   void   printi   int   val   print   void   pritnf   float   val   print   void   printf3   float3   val   print   g _ engine   registerglobalfunction   void   print   string   val   asfunction   prints   ascall _ cdecl   g _ engine   registerglobalfunction   void   print   int   val   asfunction   printi   ascall _ cdecl   g _ engine   registerglobalfunction   void   print   float   val   asfunction   pritnf   ascall _ cdecl   g _ engine   registerglobalfunction   void   print   float3   val   asfunction   printf3   ascall _ cdecl   регистрация   перегружать   метод   с   данный   проблема   вы   сталкиваться   если   захотеть   зарегистрировать   оператор   присваивание   давать   для   пример   модифицировать   наш   класс   class   float3   public   refc   public   float   x   float   y   float   z   float3   x   y   z   0   void   normalize   float   len   sqrt   x   x   y   y   z   z   len   len   len   1   x   len   y   len   z   len   float3   operator   float3  _ rval   x  _ rval   x   y  _ rval   y   z  _ rval   z   this   addref   return   this   float3   operator   float3  _ rval   x  _ rval   x   y  _ rval   y   z  _ rval   z   this   addref   return   this   обычный   регистрация   вызывать   ошибка   g _ engine   registerobjectmethod   float3   float3   opassign   float3  _ rval   asmethod   float3   operator   ascall _ thiscall   ошибка   решение   который   подходить   для   функция   тут   не   подходить   для   решение   проблема   надо   внимательно   взглядывать   на   макрос   asmethod   он   выглядеть   так   define   asmethod   c   m   assmethodptr   convert   void   c   c   m   соответственно   чтобы   мы   зарегистрировать   метод   нужно   конвертировать   он   тогда   наш   регистрация   быть   выглядеть   так   g _ engine   registerobjectmethod   float3   float3   opassign   float3  _ rval   assmethodptr   convert   float3   float3   float3   float3   operator   ascall _ thiscall   получение   адрес   на   переменный   объявлять   в   класс   если   с   глобальный   переменный   дело   обстоять   предельно   просто   то   с   переменный   в   предел   класс   все   немного   сложный   стандартный   средство   не   позволять   получать   id   переменная   по   ее   имя   или   объявление   поэтому   для   это   необходимо   проходиться   по   весь   переменный   в   класс   сам   и   сравнивать   имя   для   поиск   адрес   по   имя   переменная   мы   потребоваться   сам   имя   и   указатель   на   экземпляр   класс   скрипт   функция   быть   выглядеть   так   void   getpropaddress   const   char   name   asiscriptobject   scriptobject   for   int   i   0   igetpropertycount   i   if   strcmp   scriptobject   getpropertyname   i   name   return   scriptobject   getaddressofproperty   i   return   0   вот   и   все   что   я   хотеться   бы   рассказывать   да   я   не   освещать   момент   касаться   jit   и   шаблон   но   это   только   потому   что   еще   не   разбираться   с   это   по   мера   изучение   быть   обновлять   статья   angel   script   example   полезный   ссылка   сайт   разработчик   http   www   angelcode   com   svn   репозиторий   на   wip   https   angelscript   svn   sourceforge   net   svnroot   angelscript   trunk   русский   мануал   http   13d   labs   com   angelscript _ manual   main   html   мануал   на   английский   http   www   angelcode   com   angelscript   sdk   docs   manual   index   html   jit   компилятор   https   github   com   blindmindstudios   angelscript   jit   compiler   angelscript   скрипт   2   ноябрь   2011   обновление   1   мара   2012   комментарий   169   убирать   реклама   контакт   сообщество   участник   каталог   сайт   категория   архив   новость   gamedev   ru   разработка   игра   2001   2019