   процедурный   генерация   карта   часть   1   общий   статья   программирование   игра  
 новость   статья   код   арт   дизайн   индустрия   подсказка   термин   FAQ   страница 

   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум
   работа   входить   программированиестатьиобщий   процедурный   генерация   карта   часть   1   автор   артем
 
   гуревич   в   этот   короткий   статья   я   поделиться   нехитрый   алгоритм  
 для   процедурный   генерирование   геометрия   карта   который   я   собирать   как   прототип  
 для 
   свой   небольшой   roguelike   like   игра   чтобы   быть   понятно   о
   чем   пойти   речь   на   выход   получаться   такой   карта   кликать   для
   увеличение 
   сразу   оговариваться   что   речь   пойти   про   генерирование   только  
 геометрия   карта   если   удачно   пойти   такой   материал   то   далеко   быть  
 говорить   про 
   процедурный   генерация   остальной   элемент   игра   вещь   монстр   событие
   за   основа   алгоритм   я   взять   замечательный   статья   Procedural   Generation   The
   Dungeons   инди 
   разработчик   игра   ноэл   берри   Noel   Berry   обязательно  
 посещать   он   сайт   у   он   классный   игра   предлагать   подход   достаточно  
 простой   его   можно 
   разбивать   на   три   этап   1   генерирование   и
   размещение   комната   2   соединение   комната   коридор   3   создание   стена   и
   заключительный   чистка   генерирование 
   и   размещение   комната   первый   что   мы  
 сделать   создавать   игровой   поле   и   размещать   на   он   несколько   случайный  
 комната   который   становиться   основа 
   наш   карта   для   начало   заводить   структура
   для   карта   и   комната   в   она   сразу   задавать   размер   карта
   class   Map   public   struct 
   Room   int   x   y   w  
 h   Map   int   width   int   height   m _ width   width   m _
 height   height   m _ data   resize   width   height   0 
   private   int
   m _ width   m _ height   размер   карта   std   vector   int   m
 _ data   финальный   данные   карта   std   vector   Room   m _ rooms   комната
   один   из 
   требование   для   новый   комната   она   не   должный  
 пересекаться   с   существовать   но   я   также   хотеться   чтобы   комната   стоять  
 плотно   друг   к 
   друг   поэтому   я   добавлять   в   Room   такой
   функция   для   проверка   пересечение   bool   Room   intersect   const   Room   r
   const   return   r 
   x   x   w   x   r   x  
 r   w   r   y   y   h   y   r   y   r  
 h   вот   теперь   можно 
   сгенерировать   несколько   комната   со   случайный   расположение
   и   размер   для   это   добавлять   новый   метод   void   Map   generate
   int   roomsCount   m _ rooms   clear 
   второй   цикл   предотвращать   залипание  
 в   случай   если   на   карта   уже   не   помещаться   ни   один  
 комната   for   int   i   0   i 
   roomsCount   i   for   int
   j   0   j   1000   j   ширина   и   высота   комната   в
   предел   10   40   const   int   w 
   10   rand   31  
 h   10   rand   31   избегать   прилипание   комната   к   край   карта  
 const   Room   room   3   rand   m _ width   w 
   6   3
   rand   m _ height   h   6   w   h   находить   первый   комната
   из   уже   существовать   который   пересекаться   с   новый   auto   intersect 
  
 std   find _ if   std   begin   m _ rooms   std   end   m _
 rooms   room   const   Room   r   return   room   intersect   r   если  
 новый   комната   не 
   иметь   пересечение   добавлять   она   if   intersect   std
   end   m _ rooms   m _ rooms   push _ back   room   break   теперь
   у   мы   быть   набор   случайный   комната 
   который   довольно   легко  
 можно   преобразовывать   в   2D   массив   карта   занулять   карта   индекс   0  
 m _ data   assign   m _ width   m _ height   0   пространство   комната 

   заполнять   индекс   1   for   const   Room   room   m _ rooms   for
   int   x   0   x   room   w   x   for   int   y
   0 
   y   room   h   y   m _ data   room   x  
 x   room   y   y   m _ width   1   в   итог   у  
 мы   должно   получаться   что 
   то   такой   процесс   визуализация   я   затрагивать
   не   быть   соединение   комната   коридор   теперь   весь   этот   комната   надо
   связывать   между   себя   коридор 
   иначе   как   наш   герой   быть  
 перемещаться   по   карта   и   снова   идея   достаточно   простой   последовательно   перебирать  
 комната   на   карта   и   искать 
   путь   от   середина   один   комната
   до   середина   следующий   в   список   такой   образ   получать   гарантированный   проход
   от   первый   до   последний   комната 
   для   поиск   путь   использовать  
 базовый   алгоритм   A   A   star   который   подробно   описывать   во   множество  
 источник   например   здесь   я   использовать   такой 
   код   версия   без   оптимизация
   struct   Point   int   x   y   cost   bool   operator   const   Point
   p   const   return   x   p   x 
   y   p   y  
 bool   operator   const   Point   p   const   return   cost   p   cost  
 void   Map   generatePassage   const   Point   start   const 
   Point   finish   для
   хранение   направление   на   родительский   клетка   std   vector   int   parents   m
 _ width   m _ height   1   приоритетный   очередь   доступный   клетка   отсортировывать 
  
 по   стоимость   std   priority _ queue   Point   active   active   push   start  
 направление   возможный   перемещение   static   const   int   directions   4   2   1  
 0 
   0   1   1   0   0   1   while   active   empty
   брать   самый   дешевый   клетка   из   список   доступный   const   Point   point
   active 
   top   active   pop   if   point   finish   break   продолжать  
 поиск   в   доступный   направление   for   int   i   0   i   4  
 i   Point 
   p   point   x   directions   i   0   point   y
   directions   i   1   0   if   p   x   0   p   y
   0   p 
   x   m _ width   p   y   m _ height  
 continue   если   мы   еще   не   посещать   заданный   клетка   if   parents  
 p   x   p   y   m _ width 
   0   вычислять   стоимость   указанный
   клетка   p   cost   calcCost   p   finish   active   push   p   parents
   p   x   p   y   m _ width   i 
   путь   находить  
 теперь   прокладывать   он   на   карта   начинать   с   конец   Point   point  
 finish   while   point   start   m _ data   point   x   point 
   y
   m _ width   1   const   int   directon   directions   parents   point   x
   point   y   m _ width   point   x   directon   0   point   y
   directon 
   1   функция   calcCost   возвращать   стоимость   клетка   вычислять   такой  
 образ   что   мы   выгодно   перемещаться   по   уже   существовать   комната   и  
 коридор   чем 
   создавать   новый   плюс   небольшой   эвристика   который   позволять   мы
   целенаправленно   идти   к   конечный   точка   с   этот   параметр   вы   мочь
   поиграться   самостоятельно 
   после   построение   коридор   у   мы   на   рука  
 оказываться   карта   такой   вид   создание   стена   и   заключительный   чистка   для  
 полнота   не   хватать 
   еще   один   небольшой   деталь   стена   конечно   можно
   обходиться   и   без   они   но   как   правило   стена   можно   красиво
   нарисовать   визуально   разграничивать 
   пространство   карта   поэтому   добавлять   новый   метод  
 который   проходиться   по   весь   карта   и   добавлять   стена   везде   где  
 пустой   клетка   граничить   с 
   клетка   комната   и   коридор   void   Map
   generateWalls   смещение   для   соседний   клетка   static   const   int   offsets   8
   2   1   1   0 
   1   1   1   1   0  
 1   1   0   1   1   1   1   0   игнорировать   край  
 карта   чтобы   не   проверять   граничный 
   условие   for   int   x   1
   x   m _ width   1   x   for   int   y   1   y
   m _ height   1   y   if   m _ data   x 
   y  
 m _ width   0   for   int   i   0   i   8   i  
 если   по   соседство   быть   хоть   один   клетка   комната   или   коридор 

   размещать   стена   индекс   2   if   m _ data   x   offsets   i
   0   y   offsets   i   1   m _ width   1   m _ data
   x   y   m _ width 
   2   break   после   это   мы  
 получать   уже   полноценный   карта   но   и   это   я   показываться   мало  
 поэтому   я   решать   добавлять   финальный 
   чистка   где   я   убирать   ненужный
   на   мой   взгляд   стена   и   различный   мелкий   артефакт   код   этот
   метод   довольно   грязный   так   что 
   приводить   он   не   быть  
 мочь   лишь   сказать   что   на   выход   я   получать   такой   результат  
 заключение   программа   который   генерировать   карта   излагать 
   способ   levelgen1   надеяться   мой
   описание   достаточно   простой   алгоритм   для   процедурный   генерация   карта   помогать   вы
   в   создание   свой   небольшой   а   кто 
   знать   может   и  
 большой   игра   делиться   свой   идея   пожелание   и   сообщать   об   ошибка  
 в   комментарий   roguelike   генерирование   процедурный   генерация   11 
   ноябрь   2013   обновление
   13   ной   2013   комментарий   37   убирать   реклама   контакт   сообщество   участник
   каталог   сайт   категория   архив   новость   GameDev   ru 
   разработка   игра  
 2001   2019 
 процедурный генерация карта часть 1 общий статья программирование игра новость статья код арт дизайн индустрия подсказка термин FAQ страница
 сообщество форум качалка участник пользователь темный тема публикация проект форум работа входить программированиестатьиобщий процедурный генерация карта часть 1 автор артем
 гуревич в этот короткий статья я поделиться нехитрый алгоритм для процедурный генерирование геометрия карта который я собирать как прототип для
 свой небольшой roguelike like игра чтобы быть понятно о чем пойти речь на выход получаться такой карта кликать для увеличение
 сразу оговариваться что речь пойти про генерирование только геометрия карта если удачно пойти такой материал то далеко быть говорить про
 процедурный генерация остальной элемент игра вещь монстр событие за основа алгоритм я взять замечательный статья Procedural Generation The Dungeons инди
 разработчик игра ноэл берри Noel Berry обязательно посещать он сайт у он классный игра предлагать подход достаточно простой его можно
 разбивать на три этап 1 генерирование и размещение комната 2 соединение комната коридор 3 создание стена и заключительный чистка генерирование
 и размещение комната первый что мы сделать создавать игровой поле и размещать на он несколько случайный комната который становиться основа
 наш карта для начало заводить структура для карта и комната в она сразу задавать размер карта class Map public struct
 Room int x y w h Map int width int height m _ width width m _ height height m
 _ data resize width height 0 private int m _ width m _ height размер карта std vector int m
 _ data финальный данные карта std vector Room m _ rooms комната один из требование для новый комната она не
 должный пересекаться с существовать но я также хотеться чтобы комната стоять плотно друг к друг поэтому я добавлять в Room
 такой функция для проверка пересечение bool Room intersect const Room r const return r x x w x r x
 r w r y y h y r y r h вот теперь можно сгенерировать несколько комната со случайный расположение
 и размер для это добавлять новый метод void Map generate int roomsCount m _ rooms clear второй цикл предотвращать залипание
 в случай если на карта уже не помещаться ни один комната for int i 0 i roomsCount i for int
 j 0 j 1000 j ширина и высота комната в предел 10 40 const int w 10 rand 31 h
 10 rand 31 избегать прилипание комната к край карта const Room room 3 rand m _ width w 6 3
 rand m _ height h 6 w h находить первый комната из уже существовать который пересекаться с новый auto intersect
 std find _ if std begin m _ rooms std end m _ rooms room const Room r return room
 intersect r если новый комната не иметь пересечение добавлять она if intersect std end m _ rooms m _ rooms
 push _ back room break теперь у мы быть набор случайный комната который довольно легко можно преобразовывать в 2D массив
 карта занулять карта индекс 0 m _ data assign m _ width m _ height 0 пространство комната заполнять индекс
 1 for const Room room m _ rooms for int x 0 x room w x for int y 0
 y room h y m _ data room x x room y y m _ width 1 в итог у
 мы должно получаться что то такой процесс визуализация я затрагивать не быть соединение комната коридор теперь весь этот комната надо
 связывать между себя коридор иначе как наш герой быть перемещаться по карта и снова идея достаточно простой последовательно перебирать комната
 на карта и искать путь от середина один комната до середина следующий в список такой образ получать гарантированный проход от
 первый до последний комната для поиск путь использовать базовый алгоритм A A star который подробно описывать во множество источник например
 здесь я использовать такой код версия без оптимизация struct Point int x y cost bool operator const Point p const
 return x p x y p y bool operator const Point p const return cost p cost void Map generatePassage
 const Point start const Point finish для хранение направление на родительский клетка std vector int parents m _ width m
 _ height 1 приоритетный очередь доступный клетка отсортировывать по стоимость std priority _ queue Point active active push start направление
 возможный перемещение static const int directions 4 2 1 0 0 1 1 0 0 1 while active empty брать
 самый дешевый клетка из список доступный const Point point active top active pop if point finish break продолжать поиск в
 доступный направление for int i 0 i 4 i Point p point x directions i 0 point y directions i
 1 0 if p x 0 p y 0 p x m _ width p y m _ height continue
 если мы еще не посещать заданный клетка if parents p x p y m _ width 0 вычислять стоимость указанный
 клетка p cost calcCost p finish active push p parents p x p y m _ width i путь находить
 теперь прокладывать он на карта начинать с конец Point point finish while point start m _ data point x point
 y m _ width 1 const int directon directions parents point x point y m _ width point x directon
 0 point y directon 1 функция calcCost возвращать стоимость клетка вычислять такой образ что мы выгодно перемещаться по уже существовать
 комната и коридор чем создавать новый плюс небольшой эвристика который позволять мы целенаправленно идти к конечный точка с этот параметр
 вы мочь поиграться самостоятельно после построение коридор у мы на рука оказываться карта такой вид создание стена и заключительный чистка
 для полнота не хватать еще один небольшой деталь стена конечно можно обходиться и без они но как правило стена можно
 красиво нарисовать визуально разграничивать пространство карта поэтому добавлять новый метод который проходиться по весь карта и добавлять стена везде где
 пустой клетка граничить с клетка комната и коридор void Map generateWalls смещение для соседний клетка static const int offsets 8
 2 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 игнорировать край карта
 чтобы не проверять граничный условие for int x 1 x m _ width 1 x for int y 1 y
 m _ height 1 y if m _ data x y m _ width 0 for int i 0 i
 8 i если по соседство быть хоть один клетка комната или коридор размещать стена индекс 2 if m _ data
 x offsets i 0 y offsets i 1 m _ width 1 m _ data x y m _ width
 2 break после это мы получать уже полноценный карта но и это я показываться мало поэтому я решать добавлять финальный
 чистка где я убирать ненужный на мой взгляд стена и различный мелкий артефакт код этот метод довольно грязный так что
 приводить он не быть мочь лишь сказать что на выход я получать такой результат заключение программа который генерировать карта излагать
 способ levelgen1 надеяться мой описание достаточно простой алгоритм для процедурный генерация карта помогать вы в создание свой небольшой а кто
 знать может и большой игра делиться свой идея пожелание и сообщать об ошибка в комментарий roguelike генерирование процедурный генерация 11
 ноябрь 2013 обновление 13 ной 2013 комментарий 37 убирать реклама контакт сообщество участник каталог сайт категория архив новость GameDev ru
 разработка игра 2001 2019   процедурный   генерация   карта   часть   1   общий   статья   программирование   игра  
 новость   статья   код   арт   дизайн   индустрия   подсказка   термин   FAQ   страница  
 сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум  
 работа   входить   программированиестатьиобщий   процедурный   генерация   карта   часть   1   автор   артем  
 гуревич   в   этот   короткий   статья   я   поделиться   нехитрый   алгоритм   для  
 процедурный   генерирование   геометрия   карта   который   я   собирать   как   прототип   для  
 свой   небольшой   roguelike   like   игра   чтобы   быть   понятно   о   чем  
 пойти   речь   на   выход   получаться   такой   карта   кликать   для   увеличение  
 сразу   оговариваться   что   речь   пойти   про   генерирование   только   геометрия   карта  
 если   удачно   пойти   такой   материал   то   далеко   быть   говорить   про  
 процедурный   генерация   остальной   элемент   игра   вещь   монстр   событие   за   основа  
 алгоритм   я   взять   замечательный   статья   Procedural   Generation   The   Dungeons   инди  
 разработчик   игра   ноэл   берри   Noel   Berry   обязательно   посещать   он   сайт  
 у   он   классный   игра   предлагать   подход   достаточно   простой   его   можно  
 разбивать   на   три   этап   1   генерирование   и   размещение   комната   2  
 соединение   комната   коридор   3   создание   стена   и   заключительный   чистка   генерирование  
 и   размещение   комната   первый   что   мы   сделать   создавать   игровой   поле  
 и   размещать   на   он   несколько   случайный   комната   который   становиться   основа  
 наш   карта   для   начало   заводить   структура   для   карта   и   комната  
 в   она   сразу   задавать   размер   карта   class   Map   public   struct  
 Room   int   x   y   w   h   Map   int   width   int  
 height   m _ width   width   m _ height   height   m _ data   resize  
 width   height   0   private   int   m _ width   m _ height   размер  
 карта   std   vector   int   m _ data   финальный   данные   карта   std  
 vector   Room   m _ rooms   комната   один   из   требование   для   новый  
 комната   она   не   должный   пересекаться   с   существовать   но   я   также  
 хотеться   чтобы   комната   стоять   плотно   друг   к   друг   поэтому   я  
 добавлять   в   Room   такой   функция   для   проверка   пересечение   bool   Room  
 intersect   const   Room   r   const   return   r   x   x   w  
 x   r   x   r   w   r   y   y   h   y  
 r   y   r   h   вот   теперь   можно   сгенерировать   несколько   комната  
 со   случайный   расположение   и   размер   для   это   добавлять   новый   метод  
 void   Map   generate   int   roomsCount   m _ rooms   clear   второй   цикл  
 предотвращать   залипание   в   случай   если   на   карта   уже   не   помещаться  
 ни   один   комната   for   int   i   0   i   roomsCount   i  
 for   int   j   0   j   1000   j   ширина   и   высота  
 комната   в   предел   10   40   const   int   w   10   rand  
 31   h   10   rand   31   избегать   прилипание   комната   к   край  
 карта   const   Room   room   3   rand   m _ width   w   6  
 3   rand   m _ height   h   6   w   h   находить   первый  
 комната   из   уже   существовать   который   пересекаться   с   новый   auto   intersect  
 std   find _ if   std   begin   m _ rooms   std   end   m _
 rooms   room   const   Room   r   return   room   intersect   r   если  
 новый   комната   не   иметь   пересечение   добавлять   она   if   intersect   std  
 end   m _ rooms   m _ rooms   push _ back   room   break   теперь  
 у   мы   быть   набор   случайный   комната   который   довольно   легко   можно  
 преобразовывать   в   2D   массив   карта   занулять   карта   индекс   0   m _
 data   assign   m _ width   m _ height   0   пространство   комната   заполнять  
 индекс   1   for   const   Room   room   m _ rooms   for   int  
 x   0   x   room   w   x   for   int   y   0  
 y   room   h   y   m _ data   room   x   x   room  
 y   y   m _ width   1   в   итог   у   мы   должно  
 получаться   что   то   такой   процесс   визуализация   я   затрагивать   не   быть  
 соединение   комната   коридор   теперь   весь   этот   комната   надо   связывать   между  
 себя   коридор   иначе   как   наш   герой   быть   перемещаться   по   карта  
 и   снова   идея   достаточно   простой   последовательно   перебирать   комната   на   карта  
 и   искать   путь   от   середина   один   комната   до   середина   следующий  
 в   список   такой   образ   получать   гарантированный   проход   от   первый   до  
 последний   комната   для   поиск   путь   использовать   базовый   алгоритм   A   A  
 star   который   подробно   описывать   во   множество   источник   например   здесь   я  
 использовать   такой   код   версия   без   оптимизация   struct   Point   int   x  
 y   cost   bool   operator   const   Point   p   const   return   x  
 p   x   y   p   y   bool   operator   const   Point   p  
 const   return   cost   p   cost   void   Map   generatePassage   const   Point  
 start   const   Point   finish   для   хранение   направление   на   родительский   клетка  
 std   vector   int   parents   m _ width   m _ height   1   приоритетный  
 очередь   доступный   клетка   отсортировывать   по   стоимость   std   priority _ queue   Point  
 active   active   push   start   направление   возможный   перемещение   static   const   int  
 directions   4   2   1   0   0   1   1   0   0  
 1   while   active   empty   брать   самый   дешевый   клетка   из   список  
 доступный   const   Point   point   active   top   active   pop   if   point  
 finish   break   продолжать   поиск   в   доступный   направление   for   int   i  
 0   i   4   i   Point   p   point   x   directions   i  
 0   point   y   directions   i   1   0   if   p   x  
 0   p   y   0   p   x   m _ width   p   y  
 m _ height   continue   если   мы   еще   не   посещать   заданный   клетка  
 if   parents   p   x   p   y   m _ width   0   вычислять  
 стоимость   указанный   клетка   p   cost   calcCost   p   finish   active   push  
 p   parents   p   x   p   y   m _ width   i   путь  
 находить   теперь   прокладывать   он   на   карта   начинать   с   конец   Point  
 point   finish   while   point   start   m _ data   point   x   point  
 y   m _ width   1   const   int   directon   directions   parents   point  
 x   point   y   m _ width   point   x   directon   0   point  
 y   directon   1   функция   calcCost   возвращать   стоимость   клетка   вычислять   такой  
 образ   что   мы   выгодно   перемещаться   по   уже   существовать   комната   и  
 коридор   чем   создавать   новый   плюс   небольшой   эвристика   который   позволять   мы  
 целенаправленно   идти   к   конечный   точка   с   этот   параметр   вы   мочь  
 поиграться   самостоятельно   после   построение   коридор   у   мы   на   рука   оказываться  
 карта   такой   вид   создание   стена   и   заключительный   чистка   для   полнота  
 не   хватать   еще   один   небольшой   деталь   стена   конечно   можно   обходиться  
 и   без   они   но   как   правило   стена   можно   красиво   нарисовать  
 визуально   разграничивать   пространство   карта   поэтому   добавлять   новый   метод   который   проходиться  
 по   весь   карта   и   добавлять   стена   везде   где   пустой   клетка  
 граничить   с   клетка   комната   и   коридор   void   Map   generateWalls   смещение  
 для   соседний   клетка   static   const   int   offsets   8   2   1  
 1   0   1   1   1   1   0   1   1   0  
 1   1   1   1   0   игнорировать   край   карта   чтобы   не  
 проверять   граничный   условие   for   int   x   1   x   m _ width  
 1   x   for   int   y   1   y   m _ height   1  
 y   if   m _ data   x   y   m _ width   0   for  
 int   i   0   i   8   i   если   по   соседство   быть  
 хоть   один   клетка   комната   или   коридор   размещать   стена   индекс   2  
 if   m _ data   x   offsets   i   0   y   offsets   i  
 1   m _ width   1   m _ data   x   y   m _ width  
 2   break   после   это   мы   получать   уже   полноценный   карта   но  
 и   это   я   показываться   мало   поэтому   я   решать   добавлять   финальный  
 чистка   где   я   убирать   ненужный   на   мой   взгляд   стена   и  
 различный   мелкий   артефакт   код   этот   метод   довольно   грязный   так   что  
 приводить   он   не   быть   мочь   лишь   сказать   что   на   выход  
 я   получать   такой   результат   заключение   программа   который   генерировать   карта   излагать  
 способ   levelgen1   надеяться   мой   описание   достаточно   простой   алгоритм   для   процедурный  
 генерация   карта   помогать   вы   в   создание   свой   небольшой   а   кто  
 знать   может   и   большой   игра   делиться   свой   идея   пожелание   и  
 сообщать   об   ошибка   в   комментарий   roguelike   генерирование   процедурный   генерация   11  
 ноябрь   2013   обновление   13   ной   2013   комментарий   37   убирать   реклама  
 контакт   сообщество   участник   каталог   сайт   категория   архив   новость   GameDev   ru  
 разработка   игра   2001   2019   процедурный   генерация   карта   часть   1   общий   статья   программирование   игра   новость   статья   код   арт   дизайн   индустрия   подсказка   термин   FAQ   страница   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум   работа   входить   программированиестатьиобщий   процедурный   генерация   карта   часть   1   автор   артем   гуревич   в   этот   короткий   статья   я   поделиться   нехитрый   алгоритм   для   процедурный   генерирование   геометрия   карта   который   я   собирать   как   прототип   для   свой   небольшой   roguelike   like   игра   чтобы   быть   понятно   о   чем   пойти   речь   на   выход   получаться   такой   карта   кликать   для   увеличение   сразу   оговариваться   что   речь   пойти   про   генерирование   только   геометрия   карта   если   удачно   пойти   такой   материал   то   далеко   быть   говорить   про   процедурный   генерация   остальной   элемент   игра   вещь   монстр   событие   за   основа   алгоритм   я   взять   замечательный   статья   Procedural   Generation   The   Dungeons   инди   разработчик   игра   ноэл   берри   Noel   Berry   обязательно   посещать   он   сайт   у   он   классный   игра   предлагать   подход   достаточно   простой   его   можно   разбивать   на   три   этап   1   генерирование   и   размещение   комната   2   соединение   комната   коридор   3   создание   стена   и   заключительный   чистка   генерирование   и   размещение   комната   первый   что   мы   сделать   создавать   игровой   поле   и   размещать   на   он   несколько   случайный   комната   который   становиться   основа   наш   карта   для   начало   заводить   структура   для   карта   и   комната   в   она   сразу   задавать   размер   карта   class   Map   public   struct   Room   int   x   y   w   h   Map   int   width   int   height   m _ width   width   m _ height   height   m _ data   resize   width   height   0   private   int   m _ width   m _ height   размер   карта   std   vector   int   m _ data   финальный   данные   карта   std   vector   Room   m _ rooms   комната   один   из   требование   для   новый   комната   она   не   должный   пересекаться   с   существовать   но   я   также   хотеться   чтобы   комната   стоять   плотно   друг   к   друг   поэтому   я   добавлять   в   Room   такой   функция   для   проверка   пересечение   bool   Room   intersect   const   Room   r   const   return   r   x   x   w   x   r   x   r   w   r   y   y   h   y   r   y   r   h   вот   теперь   можно   сгенерировать   несколько   комната   со   случайный   расположение   и   размер   для   это   добавлять   новый   метод   void   Map   generate   int   roomsCount   m _ rooms   clear   второй   цикл   предотвращать   залипание   в   случай   если   на   карта   уже   не   помещаться   ни   один   комната   for   int   i   0   i   roomsCount   i   for   int   j   0   j   1000   j   ширина   и   высота   комната   в   предел   10   40   const   int   w   10   rand   31   h   10   rand   31   избегать   прилипание   комната   к   край   карта   const   Room   room   3   rand   m _ width   w   6   3   rand   m _ height   h   6   w   h   находить   первый   комната   из   уже   существовать   который   пересекаться   с   новый   auto   intersect   std   find _ if   std   begin   m _ rooms   std   end   m _ rooms   room   const   Room   r   return   room   intersect   r   если   новый   комната   не   иметь   пересечение   добавлять   она   if   intersect   std   end   m _ rooms   m _ rooms   push _ back   room   break   теперь   у   мы   быть   набор   случайный   комната   который   довольно   легко   можно   преобразовывать   в   2D   массив   карта   занулять   карта   индекс   0   m _ data   assign   m _ width   m _ height   0   пространство   комната   заполнять   индекс   1   for   const   Room   room   m _ rooms   for   int   x   0   x   room   w   x   for   int   y   0   y   room   h   y   m _ data   room   x   x   room   y   y   m _ width   1   в   итог   у   мы   должно   получаться   что   то   такой   процесс   визуализация   я   затрагивать   не   быть   соединение   комната   коридор   теперь   весь   этот   комната   надо   связывать   между   себя   коридор   иначе   как   наш   герой   быть   перемещаться   по   карта   и   снова   идея   достаточно   простой   последовательно   перебирать   комната   на   карта   и   искать   путь   от   середина   один   комната   до   середина   следующий   в   список   такой   образ   получать   гарантированный   проход   от   первый   до   последний   комната   для   поиск   путь   использовать   базовый   алгоритм   A   A   star   который   подробно   описывать   во   множество   источник   например   здесь   я   использовать   такой   код   версия   без   оптимизация   struct   Point   int   x   y   cost   bool   operator   const   Point   p   const   return   x   p   x   y   p   y   bool   operator   const   Point   p   const   return   cost   p   cost   void   Map   generatePassage   const   Point   start   const   Point   finish   для   хранение   направление   на   родительский   клетка   std   vector   int   parents   m _ width   m _ height   1   приоритетный   очередь   доступный   клетка   отсортировывать   по   стоимость   std   priority _ queue   Point   active   active   push   start   направление   возможный   перемещение   static   const   int   directions   4   2   1   0   0   1   1   0   0   1   while   active   empty   брать   самый   дешевый   клетка   из   список   доступный   const   Point   point   active   top   active   pop   if   point   finish   break   продолжать   поиск   в   доступный   направление   for   int   i   0   i   4   i   Point   p   point   x   directions   i   0   point   y   directions   i   1   0   if   p   x   0   p   y   0   p   x   m _ width   p   y   m _ height   continue   если   мы   еще   не   посещать   заданный   клетка   if   parents   p   x   p   y   m _ width   0   вычислять   стоимость   указанный   клетка   p   cost   calcCost   p   finish   active   push   p   parents   p   x   p   y   m _ width   i   путь   находить   теперь   прокладывать   он   на   карта   начинать   с   конец   Point   point   finish   while   point   start   m _ data   point   x   point   y   m _ width   1   const   int   directon   directions   parents   point   x   point   y   m _ width   point   x   directon   0   point   y   directon   1   функция   calcCost   возвращать   стоимость   клетка   вычислять   такой   образ   что   мы   выгодно   перемещаться   по   уже   существовать   комната   и   коридор   чем   создавать   новый   плюс   небольшой   эвристика   который   позволять   мы   целенаправленно   идти   к   конечный   точка   с   этот   параметр   вы   мочь   поиграться   самостоятельно   после   построение   коридор   у   мы   на   рука   оказываться   карта   такой   вид   создание   стена   и   заключительный   чистка   для   полнота   не   хватать   еще   один   небольшой   деталь   стена   конечно   можно   обходиться   и   без   они   но   как   правило   стена   можно   красиво   нарисовать   визуально   разграничивать   пространство   карта   поэтому   добавлять   новый   метод   который   проходиться   по   весь   карта   и   добавлять   стена   везде   где   пустой   клетка   граничить   с   клетка   комната   и   коридор   void   Map   generateWalls   смещение   для   соседний   клетка   static   const   int   offsets   8   2   1   1   0   1   1   1   1   0   1   1   0   1   1   1   1   0   игнорировать   край   карта   чтобы   не   проверять   граничный   условие   for   int   x   1   x   m _ width   1   x   for   int   y   1   y   m _ height   1   y   if   m _ data   x   y   m _ width   0   for   int   i   0   i   8   i   если   по   соседство   быть   хоть   один   клетка   комната   или   коридор   размещать   стена   индекс   2   if   m _ data   x   offsets   i   0   y   offsets   i   1   m _ width   1   m _ data   x   y   m _ width   2   break   после   это   мы   получать   уже   полноценный   карта   но   и   это   я   показываться   мало   поэтому   я   решать   добавлять   финальный   чистка   где   я   убирать   ненужный   на   мой   взгляд   стена   и   различный   мелкий   артефакт   код   этот   метод   довольно   грязный   так   что   приводить   он   не   быть   мочь   лишь   сказать   что   на   выход   я   получать   такой   результат   заключение   программа   который   генерировать   карта   излагать   способ   levelgen1   надеяться   мой   описание   достаточно   простой   алгоритм   для   процедурный   генерация   карта   помогать   вы   в   создание   свой   небольшой   а   кто   знать   может   и   большой   игра   делиться   свой   идея   пожелание   и   сообщать   об   ошибка   в   комментарий   roguelike   генерирование   процедурный   генерация   11   ноябрь   2013   обновление   13   ной   2013   комментарий   37   убирать   реклама   контакт   сообщество   участник   каталог   сайт   категория   архив   новость   GameDev   ru   разработка   игра   2001   2019