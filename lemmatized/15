   ассемблерный   вставка   в   GCC   общий   статья   программирование   игра   новость   статья   код   арт   дизайн   индустрия   подсказка   термин   FAQ   страница   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум   работа   входить   программированиестатьиобщий   ассемблерный   вставка   в   GCC   автор   FordPerfect   статья   являться   попытка   систематизировать   brain   dump   известный   автор   информация   по   ассемблерный   вставка   в   GCC   автор   не   считать   себя   авторитет   в   данный   вопрос   и   статья   мочь   содержать   неточность   замечание   дополнение   и   исправление   приветствоваться   вопрос   зачем   вообще   использовать   встроенный   ассемблер   выходить   за   рамка   данный   статья   предполагаться   что   читатель   знакомый   с   какой   либо   ассемблер   учебник   по   язык   per   se   статья   не   являться   за   исключение   случай   когда   явно   оговаривать   обратный   информация   в   равный   мера   применимый   к   C   и   к   C   весь   пример   в   статья   для   архитектура   x86   и   x86 _ 64   но   сам   поддержка   ассемблерный   вставка   в   GCC   не   ограничиваться   этот   архитектура   и   большинство   информация   применимый   и   для   другой   весь   отрывок   код   если   явно   не   оговаривать   обратный   и   не   указывать   авторство   находиться   в   общий   доступ   public   domain   общий   сведение   концептуальный   модель   GNU   Assembler   и   синтаксис   AT   T   написание   многострочный   команда   синтаксис   и   семантика   базовый   форма   расширенный   форма   операнд   OutputOperands   InputOperands   Clobbers   GotoLabels   Constraints   пример   переход   и   метка   диспетчеризация   CPU   дополнительно   модификатор   операнд   явный   указание   регистр   для   переменный   явный   указание   имя   вычисление   размер   код   недокументированный   возможность   литература   общий   сведение   язык   C   поддерживать   ассемблерный   вставка   что   отражать   в   стандарт   язык   однако   данный   возможность   глубоко   специфичный   индивидуальный   компилятор   архитектура   поэтому   стандарт   немногословный   и   ограничиваться   следующий   текст   7   4   The   asm   declaration   dcl   asm   An   asm   declaration   has   the   form   asm   definition   asm   string   literal   The   asm   declaration   is   conditionally   supported   its   meaning   is   implementation   defined   Note   Typically   it   is   used   to   pass   information   through   the   implementation   to   an   assembler   end   note   стандарт   язык   C   ассемблерный   вставка   вообще   не   определять   и   упоминать   они   только   в   список   распространять   расширение   J   5   10   The   asm   keyword   The   asm   keyword   may   be   used   to   insert   assembly   language   directly   into   the   translator   output   6   8   The   most   common   implementation   is   via   a   statement   of   the   form   asm   character   string   literal   большинство   популярный   компилятор   поддерживать   этот   возможность   в   тот   или   иной   вид   компилятор   MSVC   поддерживать   они   для   32   битный   но   не   для   64   битный   код   также   как   можно   замечать   синтаксис   ассемблерный   вставка   MSVC   отличаться   от   указанный   в   стандарт   под   GCC   здесь   и   далее   если   не   оговаривать   обратный   подразумеваться   компилятор   поддерживать   набор   расширение   GCC   это   с   некоторый   пора   официальный   определение   макро  __ GNUC __  см   https   gcc   gnu   org   onlinedocs   cpp   Common   Predefined   Macros   html   https   sourceforge   net   p   predef   wiki   Compilers   и   далее   по   ссылка   в   частность   компилятор   clang   и   icc   определять  __ GNUC __  оба   этот   компилятор   так   же   как   и   сам   GCC   поддерживать   ассемблерный   вставка   в   синтаксис   GCC   концептуальный   модель   типично   компилятор   превращать   исходный   код   в   объектный   код   который   потом   сборщик   линкер   собираться   в   исполнять   файл   GCC   использовать   несколько   необычный   решение   компилятор   C   и   C   во   многое   близкий   к   языковой   транслятор   https   en   wikipedia   org   wiki   Source   to   source _ compiler   и   результат   их   работа   являться   файл   на   язык   ассемблер   именно   на   текстовый   мнемонический   ассемблер   а   не   в   машинный   код   который   далее   преобразовываться   в   объектный   код   штатный   ассемблер   утилита   as   ассемблер   входить   в   состав   GNU   обычно   в   документация   называть   GNU   Assembler   сокращенно   gas   несмотря   на   то   что   сам   утилита   называться   именно   as   обычно   при   вызов   компилятор   GCC   сам   производить   соответствующий   действие   вызов   as   и   т   д   под   капот   и   для   создание   объектный   файл   никакой   дополнительный   указание   не   требоваться   можно   указывать   компилятор   опция   S   большой   буква   S   у   малый   s   другой   значение   для   то   чтобы   производить   только   перевод   программа   на   ассемблер   рассматривать   пример   создавать   файл   test _ asm   cpp   со   следующий   код   include   cstdio   int   main   printf   Hello   world   n   return   0   выполнять   команда   gcc   test _ asm   cpp   S   получать   файл   test _ asm   s   традиционный   расширение   файл   на   язык   ассемблер   для   GCC   являться   s   file   test _ asm   cpp   def  ___ main   scl   2   type   32   endef   section   rdata   dr   LC0   ascii   Hello   world   0   text   globl  _ main   def  _ main   scl   2   type   32   endef  _ main   pushl   ebp   movl   esp   ebp   andl   16   esp   subl   16   esp   call  ___ main   movl   LC0   esp   call  _ puts   movl   0   eax   leave   ret   ident   GCC   tdm   1   4   9   2   def  _ puts   scl   2   type   32   endef   организация   код   который   генерировать   GCC   из   исходник   на   C   выходить   за   рамка   данный   статья   при   беглый   просмотр   можно   замечать   1   префикс  _  подчеркивание   для   экспортировать   функция   C   и   для   main   для   функция   на   C   использоваться   несколько   более   сложный   name   mangling   2   функция  __ main   два   подчеркивание   в   который   GCC   производить   некоторый   инициализация   ее   реализация   находиться   отдельно   в   состав   стандартный   файл   GCC   3   printf   быть   соптимизировать   до   puts   причем   никакой   опция   оптимизация   указывать   не   быть   при   желание   можно   получать   несколько   более   подробный   код   с   дополнительный   комментарий   воспользоваться   опция   fverbose   asm   построчный   листинг   в   файл   test _ asm   lst   C   и   ассемблер   можно   получать   воспользоваться   команда   подробно   см   http   www   delorie   com   djgpp   v2faq   faq8 _ 20   html   gcc   c   g   Wa   a   ad   test _ asm   cpp   test _ asm   lst   данный   модель   достаточно   естественный   образ   приводить   к   логика   ассемблерный   вставка   который   и   использовать   GCC   GCC   вставлять   после   возможный   макроподстановка   текст   ассемблерный   вставка   непосредственно   в   выходной   файл   на   язык   ассемблер   пример   о   конкретный   синтаксис   ассемблерный   вставка   см   низкий   include   cstdio   int   main   printf   Before   asm   n   asm   nop   printf   After   asm   n   return   0   преобразовываться   в   file   test _ asm   cpp   def  ___ main   scl   2   type   32   endef   section   rdata   dr   LC0   ascii   Before   asm   0   LC1   ascii   After   asm   0   text   globl  _ main   def  _ main   scl   2   type   32   endef  _ main   pushl   ebp   movl   esp   ebp   andl   16   esp   subl   16   esp   call  ___ main   movl   LC0   esp   call  _ puts   APP   6   test _ asm   cpp   1   nop   0   2   NO _ APP   movl   LC1   esp   call  _ puts   movl   0   eax   leave   ret   ident   GCC   tdm   1   4   9   2   def  _ puts   scl   2   type   32   endef   как   видеть   GCC   отмечать   вставка   в   код   явный   образ   модель   использовать   GCC   иметь   несколько   важный   свойство   во   первый   компилятор   почти   не   подглядывать   в   указанный   программист   код   ассемблерный   вставка   он   при   необходимость   проводить   макроподстановка   см   низкий   но   в   общий   передавать   код   ассемблер   почти   как   быть   и   почти   не   иметь   представление   о   происходить   внутри   в   частность   обнаружение   ошибка   заниматься   именно   ассемблер   GCC   передавать   программист   сообщение   об   ошибка   от   ассемблер   во   второй   как   следствие   ассемблерный   вставка   являться   для   компилятор   и   в   частность   оптимизатор   единый   непрозрачный   команда   черный   ящик   все   нужный   он   информация   о   то   как   этот   блок   взаимодействовать   с   окружать   мир   компилятор   получать   напрямую   от   программист   из   явно   указанный   операнд   ассемблерный   вставка   задавать   связь   ассемблерный   код   с   переменный   C   и   список   задействовать   ресурс   регистр   и   т   д   и   изменение   состояние   флаг   память   и   т   д   в   ассемблерный   вставка   а   не   из   детальный   рассмотрение   текст   ассемблерный   вставка   который   он   не   производить   технически   говорить   GCC   предоставлять   программист   интерфейс   к   Register   Transfer   Language   ответственность   о   соответствие   действительность   информация   указывать   в   операнд   целиком   лежать   на   программист   в   рамка   этот   ограничение   компилятор   вольный   обращаться   с   ассемблерный   вставка   как   и   с   другой   команда   так   как   он   вздуматься   перемещать   дублировать   напр   при   подстановка   inline   функция   или   вообще   выбрасывать   если   оптимизатор   прийти   к   такой   решение   страница   1   2   3   4   5   следующий   GCC   inline   ассемблер   30   апрель   2016   обновление   4   май   2016   комментарий   33   убирать   реклама   контакт   сообщество   участник   каталог   сайт   категория   архив   новость   GameDev   ru   разработка   игра   2001   2019