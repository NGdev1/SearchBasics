   маленький   статья   про   Vulkan   график   статья   программирование   игра   новость   статья   код   арт   дизайн   индустрия   подсказка   термин   FAQ   страница   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум   работа   входить   программированиестатьиграфика   маленький   статья   про   Vulkan   автор   SDC   это   небольшой   статья   для   тот   кто   хотеть   разбираться   в   основной   концепция   новый   графический   API   и   его   отличие   от   предыдущий   поколение   я   быть   говорить   о   Vulkan   vs   OpenGL   но   многий   вещь   можно   применять   и   к   другой   API   новый   и   старый   поколение   Command   Buffers   Graphics   Pipeline   Renderpass   синхронизация   управление   память   Command   Buffers   самый   главный   отличие   Vulkan   от   OpenGL   явный   асинхронность   работа   с   GPU   если   в   OpenGL   драйвер   сам   решать   когда   начинать   нагружать   видеокарта   то   здесь   это   делать   явно   сам   приложение   когда   вы   хотеть   нарисовать   треугольник   запускать   вычислительный   шейдер   скопировать   данные   в   память   устройство   вы   нужный   записывать   command   buffer   и   отправлять   он   в   очередь   на   исполнение   командный   буфер   можно   использовать   повторно   запускать   из   они   вторичный   буфер   собирать   в   цепочка   с   помощь   семафор   тут   быть   достаточно   широкий   простор   для   оптимизация   рендер   Graphics   Pipeline   графический   конвейер   центральный   часть   3D   API   сам   структура   конвейер   не   изменяться   тот   же   шейдерный   стадия   тест   глубина   параметр   блендинг   и   так   далее   но   если   в   OpenGL   параметр   пайплайн   глобальный   машина   состояние   который   нужно   настраивать   под   каждый   вызов   отрисовка   то   в   Vulkan   он   выделять   в   отдельный   объект   сначала   вы   создавать   pipeline   объект   а   потом   в   буфер   команда   просто   устанавливать   нужный   подключать   descriptor   sets   с   ресурс   UBO   SSBO   текстура   семплер   атрибут   вершина   и   рисовать   основной   задача   такой   подход   локализовать   очень   затратный   операция   создание   пайплайн   на   стадия   инициализация   и   в   дальнейший   быстро   переключаться   между   готовый   к   применение   набор   параметр   это   намного   эффективно   ситуация   в   OpenGL   когда   драйвер   каждый   кадр   вынуждать   много   раз   проверять   корректность   запрос   приложение   также   в   API   быть   возможность   наследование   и   pipeline   cache   который   позволять   ускорять   создание   конвейер   за   счет   переиспользование   уже   иметься   или   сохранять   в   предыдущий   сессия   пайплайн   Renderpass   в   Vulkan   быть   еще   один   связывать   с   графика   объект   о   который   нужно   упоминать   и   который   отличать   он   от   другой   nextgen   API   это   renderpass   изначально   он   быть   добавлять   для   облегчение   жизнь   на   мобильный   тайловый   GPU   в   который   для   весь   draw   call   ов   сначала   отрабатывать   вершинный   часть   конвейер   а   затем   для   каждый   тайл   фреймбуфер   фрагментный   конвейер   для   полигон   попадать   в   тайл   рендерпасс   позволять   явно   группировать   вызов   отрисовка   который   должный   обрабатываться   вместе   в   отдельный   сабпасс   это   не   актуально   на   десктопный   железо   но   как   писать   AMD   с   помощь   renderpass   здесь   тоже   можно   применять   некоторый   оптимизация   кроме   этот   рендерпасс   выполнять   еще   несколько   полезный   функция   управление   текстура   фреймбуфер   очистка   смена   image   layout   синхронизация   сабпасс   резолвы   мультисемплинг   синхронизация   в   сила   асинхронный   природа   работа   GPU   в   Vulkan   не   гарантироваться   последовательный   выполнение   даже   для   команда   в   один   буфер   не   говорить   уже   о   разный   буфер   и   разный   очередь   поэтому   весь   зависимость   должный   указываться   приложение   явно   кроме   прописывание   зависимость   в   рендерпассе   быть   еще   четыре   механизм   синхронизация   semaphore   fence   event   pipeline   barrier   семафор   самый   часто   использовать   механизм   сигнализировать   о   то   что   буфер   команда   завершать   работа   и   разрешать   следующий   буфер   продолжать   выполнение   для   уведомление   программа   о   то   же   событие   использоваться   fences   Events   тонкий   инструмент   для   синхронизация   конкретный   место   в   command   buffer   мочь   и   ожидаться   и   устанавливаться   сбрасываться   как   в   буфер   так   и   на   хост   барьер   синхронизировать   последующий   команда   буфер   с   предыдущий   управление   память   тема   который   многие   пугать   ручной   управление   память   на   устройство   в   Vulkan   вы   сначала   создавать   буфер   или   текстура   а   потом   назначать   для   они   область   память   с   параметр   размер   и   выравнивание   полученый   из   функция   vkGetBufferMemoryRequirements   или   vkGetImageMemoryRequirements   можно   не   заморачиваться   и   просто   передавать   этот   параметр   в   функция   аллокация   а   можно   при   желание   выделять   большой   кусок   память   сразу   и   утрамбовывать   туда   свой   данный   самый   эффективный   способ   это   единственный   место   в   который   участвовать   указатель   в   память   устройство   далеко   весь   работа   вестись   с   хендло   текстура   и   буфер   это   весь   основной   момент   что   то   оставаться   за   кадр   вроде   устройство   очередь   слой   расширение   многопоточность   SPIR   V   шейдер   но   это   сервисный   вещь   о   который   можно   почитать   в   туториал   заключение   несмотря   на   то   что   Vulkan   считаться   более   сложный   по   сравнение   с   OpenGL   и   это   конечно   так   хотя   бы   из   за   введение   несколько   новый   концепция   в   целое   это   достаточно   удобный   API   с   небольшой   количество   логично   связанный   сущность   пользоваться   он   намного   приятно   чем   немного   хаотичный   OpenGL   куда   копать   далеко   Vulkan   API   Hello   Triangle   следующий   статья   об   основа   использование   Vulkan   на   пример   создание   простой   приложение   Vulkan   in   30   minutes   краткий   обзор   функция   API   LunarG   Vulkan   SDK   маст   хев   для   разработка   в   комплект   неплохой   пример   код   на   каждый   фич   Vulkan   1   сентябрь   2016   обновление   28   фев   2019   комментарий   10   убирать   реклама   азартный   игра   в   официальный   казино   vulkanslot1   net   вулкан   контакт   сообщество   участник   каталог   сайт   категория   архив   новость   GameDev   ru   разработка   игра   2001   2019