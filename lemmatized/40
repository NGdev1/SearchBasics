   редактор   функция   на   основа   кривой   безье   2d   график   и   изометрия   статья   программирование   игра   новость   статья   код   арт   дизайн   индустрия   подсказка   термин   faq   страница   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум   работа   входить   программированиестатьи2d   график   и   изометрия   редактор   функция   на   основа   кривой   безье   автор   shalom   статья   о   кривой   безье   и   о   проблема   с   который   можно   сталкиваться   при   написание   редактор   скалярный   функция   на   база   кривой   безье   редактор   разработка   который   ложиться   в   основа   статья   быть   сделать   для   проект   filter   forge   чтобы   не   быть   голословный   показывать   конечный   результат   работа   кривая   безье   как   связывать   формула   с   то   что   мы   видеть   в   редактор   векторный   график   создание   2d   редактор   безье   стандартный   проблема   решение   проблема   построение   ломаный   по   кривой   безье   конвертирование   контрольный   точка   из   один   тип   в   другой   создание   скалярный   функция   на   база   кривой   безье   проблема   решение   проблема   единственность   значение   для   функция   решение   проблема   нахождение   значение   функция   ограничение   для   точка   и   направлять   в   интерфейс   заключение   ссылка   кривой   безье   почему   именно   кривой   безье   в   первый   очередь   из   за   свой   привычность   для   пользователь   я   не   встречать   ни   один   2d   векторный   редактор   за   основа   который   быть   взять   другой   метод   аппроксимация   кривая   по   контрольный   точка   безье   де   факто   стандарт   среди   подход   к   векторный   графика   кривой   безье   это   полином   k   степень   построить   по   k   1   точка   точка   лежать   в   n   мерный   пространство   в   дальнейший   для   выкладка   быть   использовать   n   2   редактор   то   у   мы   двумерный   наиболее   распространять   для   использование   следующий   кривой   линейный   linear   построить   по   2   точка   линейный   кривая   безье   обычный   линейный   интерполяция   формула   квадратичный   quadratic   построить   по   3   точка   квадратичный   кривая   строиться   рекуррентно   как   линейный   интерполяция   2   линейный   кривой   если   упрощать   выражение   получать   следующий   формула   кубический   cubic   строиться   по   4   точка   кубический   кривая   выражаться   через   линейный   интерполяция   2   квадратичный   кривая   после   упрощение   получать   можно   простроить   кривой   для   произвольный   n   точка   использовать   соотношение   но   на   практика   часто   все   использовать   1   n   3   во   первый   описывать   выше   случай   легкий   и   интуитивно   понятный   в   управление   для   пользователь   во   второй   чем   большой   степень   кривой   тем   много   вычисление   требоваться   для   нахождение   точка   кривой   весь   кривой   безье   независимо   от   степень   иметь   следующий   важный   свойство   кривой   начинаться   в   p0   и   заканчиваться   в   pn   кривая   не   зависеть   от   выбор   направление   движение   по   она   т   е   прямой   p0p1   и   pn   1pnявляются   касательная   к   кривой   в   начальный   и   конечный   точка   соответственно   весь   точка   кривая   находиться   внутри   выпуклый   оболочка   точка   по   который   построенный   кривой   оболочка   на   рисунок   низко   обозначать   красный   любой   кривой   можно   разбивать   в   любой   точка   получать   2   кривой   тот   же   степень   который   полностью   повторять   оригинальный   кривая   иной   слово   находиться   набор   точка   для   который   кривой   стыковаться   в   точка   соответствующий   параметр   кривой   и   совпадать   с   оригинальный   кривая   на   соответствующий   отрезок   на   пункт   5   останавливаться   подробно   алгоритм   разбиение   кривая   называться   разбиение   de   casteljau   рассматривать   алгоритм   для   кубический   кривая   безье   для   кривой   другой   порядок   он   работать   аналогично   пусть   у   мы   быть   кривой   построить   по   точка   1   2   3   4   выбирать   некоторый   параметр   t   для   рисунок   t   0   5   и   находить   точка   на   отрезок   1   2   2   3   и   3   4   соответствовать   линейный   интерполяция   с   параметр   t   называть   точка   12   23   34   соответственно   затем   повторять   операция   на   отрезок   12   23   23   34   находить   точка   123   и   234   и   наконец   построить   линейный   интерполяция   по   t   для   отрезок   123   234   получать   точка   1234   лежать   на   кривой   безье   а   кривой   построить   по   точка   1   12   123   1234   и   1234   234   34   4   повторять   оригинальный   кривая   упрощенный   код   struct   cubicpoints   vec2   p1   vec2   p2   vec2   p3   vec2   p4   void   split _ curve   const   cubicpoints   in _ points   const   double   t   cubicpoints   out _ points1   cubicpoints   out _ points2   const   vec2   p12   lerp   in _ points   p1   in _ points   p2   t   const   vec2   p23   lerp   in _ points   p2   in _ points   p3   t   const   vec2   p34   lerp   in _ points   p3   in _ points   p4   t   const   vec2   p123   lerp   p12   p23   t   const   vec2   p234   lerp   p23   p34   t   const   vec2   p1234   lerp   p123   p234   t   out _ points1   p1   in _ points   p1   out _ points1   p2   p12   out _ points1   p3   p123   out _ points1   p4   p1234   out _ points2   p1   p1234   out _ points2   p2   p234   out _ points2   p3   p34   out _ points2   p4   in _ points   p4   аналогичный   построение   для   кубический   кривая   повторяться   что   можно   t   взять   произвольный   чтобы   разбивать   кривой   в   любой   точка   это   алгоритм   очень   важный   для   рендеринг   кривой   в   редактор   на   его   база   как   правило   строить   адаптивный   ломаный   приближать   форма   кривой   этот   ломаный   использовать   для   отрисовка   кривой   как   связывать   формула   с   то   что   мы   видеть   в   редактор   векторный   график   в   векторный   редактор   никакой   формула   нет   быть   кривой   построить   по   контрольный   точка   существовать   2   основной   тип   контрольный   точка   использоваться   в   редактор   точка   с   задание   кривизна   curve   иметь   направлять   в   различный   редактор   handles   tangents   direction   points   управляющий   форма   кривая   обычно   такой   точка   иметь   2   направлять   угловой   corner   вершина   без   направлять   фактически   контрольный   точка   с   задание   кривизна   предоставлять   информация   о   2   точка   по   который   в   дальнейший   быть   строиться   кривая   безье   это   позиция   самый   точка   и   позиция   конец   ее   направлять   линейный   контрольный   точка   предоставлять   лишь   1   точка   для   построение   кривой   безье   соотносить   изображение   с   формула   кривой   безье   не   очень   сложный   каждый   кривая   безье   строиться   ровно   по   2   контрольный   точка   т   е   если   в   редактор   мы   видеть   кривой   содержать   4   контрольный   точка   как   в   пример   выше   значит   она   состоять   из   3   кривой   безье   5   контрольный   точка   из   4   кривой   безье   и   т   д   исключение   являться   замкнутый   кривой   для   они   число   кривой   безье   совпадать   с   число   контрольный   точка   степень   полином   кривой   безье   определяться   по   тип   2   контрольный   точка   для   который   она   построить   в   зависимость   от   комбинация   тип   контрольный   точка   получать   следующий   случай   построение   кривой   безье   оба   контрольный   точка   corner   в   этот   случай   мы   получать   прямой   проходить   через   позиция   котрольный   точка   т   е   линейный   кривая   безье   в   пример   это   прямой   p1   p2   один   из   контрольный   точка   curve   другой   corner   получать   квадратичный   кривая   безье   построить   по   позиция   2   контрольный   точка   и   позиция   конец   направляющая   в   пример   квадратичный   прямая   строиться   для   пара   контрольный   точка   p2   иметь   направлять   с   конец   в   точка   h   и   p3   не   иметь   направлять   кривая   стояться   по   последовательность   точка   p2   h   p3   оба   контрольный   точка   curve   получать   кубический   кривой   построить   по   позиция   2   контрольный   точка   и   позиция   конец   2   handles   в   пример   кубический   кривая   стояться   для   контрольный   точка   p3   и   p4   кривая   стояться   по   последовательность   точка   p2   h1   h2   p3   создание   2d   редактор   безье   стандартный   проблема   стандартный   проблема   два   как   отрисовывать   кривой   параметрический   кривой   в   чистый   вид   отрисовать   сложно   как   правило   использоваться   она   аппроксимация   ломаный   вершина   который   лежать   на   кривая   понятный   что   стоить   ломаный   можно   множество   способ   какой   выбирать   и   почему   практически   во   весь   векторный   редактор   контрольный   точка   с   задание   кривизна   подразделяться   на   3   тип   название   из   corel   draw   cusp   точка   иметь   2   полностью   независимый   направляющий   за   счет   это   можно   формировать   острый   угол   с   заданный   кривизна   smooth   точка   иметь   2   направлять   который   противоположно   направлять   symmetrical   тот   же   самый   что   и   smooth   только   длина   оба   направлять   всегда   одинаковый   проблема   состоять   в   конвертирование   точка   из   один   тип   в   другой   решение   проблема   построение   ломаный   по   кривой   безье   решение   в   лоб   проходиться   по   кривой   изменять   параметр   t   с   некоторый   шаг   получать   такой   образ   набор   точка   лежать   на   кривая   этот   точка   образовывать   искомый   ломаный   недостаток   данный   метод   состоять   в   то   что   кривой   быть   плохо   приближаться   на   участок   с   большой   кривизна   подробно   останавливаться   не   быть   хороший   пример   быть   в   начало   данный   статья   для   качественный   аппроксимация   кривой   хорошо   использовать   адаптивный   метод   метод   основываться   на   рекурсивный   разбиение   кривая   на   участок   пока   на   каждый   участок   мы   не   достигать   требовать   мы   гладкость   кривой   главный   загвоздка   крыться   как   раз   в   критерий   для   достигать   требовать   мы   гладкость   о   тяжкий   поиск   такой   критерий   можно   почитать   в   статья   по   ссылка   выше   но   критерий   автор   я   не   очень   понравиться   из   за   свой   неустойчивость   и   множество   частный   случай   использовать   я   критерий   порог   кривизна   как   я   казаться   прозрачный   и   устойчиво   описывать   в   статья   для   квадратичный   кривая   для   кубический   кривая   т   е   кривая   считаться   достаточно   гладкий   когда   угол   между   отрезок   соединять   ее   контрольный   точка   становиться   достаточно   тупой   в   данный   случай   для   оценка   угол   между   они   использоваться   cos   посчитать   через   скалярный   произведение   нормализовать   вектор   отрезок   на   практика   хороший   результат   давать   значение   tolerance   1e   4   1e   2   критерий   не   работать   если   какой   либо   из   соседний   т   е   например   p0   и   p1   p1   и   p2   контрольный   точка   совпадать   этот   частный   случай   решаться   следующий   образ   если   для   квадратный   кривая   p0   p1   p2   совпадать   точка   p0   p1   или   p1   p2   в   программный   реализация   находиться   на   некоторый   малый   расстояние   квадратичный   кривая   сводиться   к   линейный   и   следовательно   достаточно   добавлять   к   аппроксимирующий   ломаный   получаться   отрезок   линейный   кривая   если   для   кубический   кривая   p0   p1   p2   p3   совпадать   точка   p0   p1   или   p1   p2   или   p2   p3   в   программный   реализация   находиться   на   некоторый   малый   расстояние   использоваться   критерий   для   кубический   кривая   совпадать   точка   при   применение   критерий   быть   рассматриватся   как   один   код   для   аппроксимация   кубический   кривая   void   create _ cubic _ curve _ linear _ approx   std   vector   vec2   result _ points   const   cubicpoints   curve _ points   const   double   angle _ threshold   result _ points   push _ back   points1   point1   add _ points _ recursive   result _ points   curve _ points   angle _ threshold   result _ points   push _ back   points1   point4   void   add _ points _ recursive   std   vector   vec2   result _ points   const   cubicpoints   curve _ points   const   double   angle _ threshold   минимальный   допустимый   расстояние   между   соседний   конрольный   точка   static   const   double   len _ threshold   1e   06   const   vec2   seg1   curve _ points   p1   curve _ points   p2   const   double   seg1 _ len   seg1   get _ length   const   vec2   seg2   curve _ points   p2   curve _ points   p3   const   vec2   seg2 _ inv   curve _ points   p3   curve _ points   p2   const   double   seg2 _ len   seg2   get _ length   const   vec2   seg3   point4   point3   const   double   seg3 _ len   seg3   get _ length   bool   need _ subdivision   false   если   средний   сегмент   большой   минимальный   длина   if   seg2 _ len   len _ threshold   if   seg1 _ len   len _ threshold   seg1   dot   seg2 _ inv   1   0   angle _ threshold   seg1 _ len   seg2 _ len   seg3 _ len   len _ threshold   seg3   dot   seg2   1   0   angle _ threshold   seg3 _ len   seg2 _ len   need _ subdivision   true   else   случай   вырожденный   средний   сегмент   if   seg1 _ len   len _ threshold   seg3 _ len   len _ threshold   seg1   dot   seg3   1   0   angle _ threshold   seg1 _ len   seg3 _ len   need _ subdivision   true   if   need _ subdivision   cubicpoints   out _ points1   cubicpoints   out _ points2   split _ curve   curve _ points   0   5   out _ points1   out _ points2   add _ points _ recursive   result _ points   out _ points1   angle _ threshold   add _ points _ recursive   result _ points   out _ points2   angle _ threshold   else   const   vec2   point   get _ cubic _ curve _ point   curve _ points   0   5   result _ points   push _ back   point   конвертирование   контрольный   точка   из   один   тип   в   другой   для   конвертация   нет   строгий   правило   я   использовать   эвристика   из   corel   draw   конечный   тип   начальный   тип   corner   cusp   smooth   symmetrical   corner   строить   направлять   как   1   3   длина   вектор   в   направление   соседний   точка   corner   cusp   smooth   corner   cusp   smooth   symmetrical   cusp   удалять   направлять   повертывать   направлять   такой   образ   чтобы   они   ложиться   на   биссектриса   меньший   угол   между   старый   направляющий   сusp   smooth   symmetrical   smooth   удалять   направлять   делать   направлять   независимый   для   оба   направлять   задавать   длина   как   средний   арифметический   их   длина   старый   направлять   symmetrical   удалять   направлять   symmetrical   smooth   cusp   убирать   ограничение   на   равенство   длина   направляющий   псевдокод   для   не   совсем   очевидный   случай   struct   controlpoint   vec2   position   vec2   handle1   vec2   handle2   void   corner _ to _ cusp _ handles   const   controlpoint   left _ adjacent _ point   const   controlpoint   right _ adjacent _ point   if   left _ adjacent _ point   0   handle1   left _ adjacent _ point   position   position   3   0   if   right _ adjacent _ point   0   handle2   right _ adjacent _ point   position   position   3   0   if   left _ adjacent _ point   0   handle1   math   vector2   handle2   x   handle2   y   if   right _ adjacent _ point   0   handle2   math   vector2   handle1   x   handle1   y   void   cusp _ to _ smooth _ handles   void   static   const   double   len _ threshold   1e   06   const   double   h1 _ len   handle1   get _ length   const   double   h2 _ len   handle2   get _ length   if   h1 _ len   length _ threshold   h2 _ len   length _ threshold   const   vec2   h1 _ norm   handle1   h1 _ len   const   vec2   h2 _ norm   handle2   h2 _ len   const   vec2   new _ handles _ dir   h1 _ norm   dot   h2 _ norm   0   0   h1 _ norm   h2 _ norm   h1 _ norm   h2 _ norm   new _ handles _ dir   normalize   handle1   new _ handles _ dir   h1 _ len   handle2   new _ handles _ dir   h2 _ len   void   smooth _ to _ symmetrical _ handles   void   const   vec2   new _ handle   handle1   handle2   0   5   handle1   new _ handle   handle2   new _ handle   страница   1   2   следующий   2d   математика   9   август   2011   комментарий   12   убирать   реклама   контакт   сообщество   участник   каталог   сайт   категория   архив   новость   gamedev   ru   разработка   игра   2001   2019