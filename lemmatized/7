   компонентный   система   игровой   сущность   общий   статья   программирование   игра   новость   статья   код   арт   дизайн   индустрия   подсказка   термин   faq   страница   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум   работа   входить   программированиестатьиобщий   компонентный   система   игровой   сущность   автор   3er0   1ive   не   раз   подниматься   тема   об   иерархия   игровой   объект   их   взаимодействие   и   управление   они   я   пробовать   всякий   вариант   построение   игровой   объект   и   в   итог   останавливаться   на   компонентный   система   быть   это   давненько   так   что   система   успевать   себя   оправдывать   по   удобство   и   масштабируемость   о   получаться   схема   и   пойти   речь   но   для   начало   рассматривать   возможный   вариант   разновидность   иерархия   1   blob   game   object   god   game   object   2   compile   time   component   object   3   dynamic   component   object   aspect   oriented   object   1   blob   game   object   god   game   object   blob   game   object   god   game   object   система   все   в   один   то   быть   некий   класс   объект   который   содержать   в   себя   весь   возможный   данные   физика   график   звук   etc   это   самый   простой   и   распространенный   вариант   написание   игровой   объект   в   этот   же   казаться   простота   и   крыться   главный   недостаток   полный   отсутствие   гибкость   выглядеть   класс   такой   объект   к   пример   мочь   так   class   object   private   uint32   mflagusecomponent   nodegraphics   mgraphicsnode   physicsnode   mphysicsnode   sound   msound   такой   вариант   построение   мочь   сгодиться   в   казуальный   игра   ну   или   в   мелкий   игрушка   сделать   на   коленка   для   более   или   менее   серьезный   проект   вариант   в   больший   степень   не   приемлемый   2   compile   time   component   object   compile   time   component   object   объект   строиться   из   отдельный   компонент   графический   физический   etc   на   этап   компиляция   выглядеть   мочь   к   пример   так   class   component   public   virtual   void   setposition   const   vec3   virtual   void   setorientation   const   vec4   virtual   const   vec3   getposition   const   virtual   const   vec4   getorientation   const   class   graphics   public   component   implementation   class   physics   public   component   implementation   template   typename   ttypelist   class   object   template   typename   t   t   getcomponent   return   typelist   at   ttypelist   t   result   protected   ttypelist   mcomponents   typedef   object   maketypelist   graphics   physics   object1   typedef   object   maketypelist   graphics   sound   object2   здесь   под   ttypelist   пониматься   некий   смесь   из   список   тип   и   обычный   динамический   список   расписывать   не   быть   так   как   это   не   основной   тема   о   который   идти   речь   этот   схема   уже   пригодный   для   использование   и   быть   реальный   игра   где   она   применяться   и   довольно   успешно   немного   пояснять   здесь   мы   на   этап   компиляция   собирать   объект   только   из   тот   компонент   который   реально   мочь   пригождаться   и   если   мы   попытаться   использовать   что   либо   что   нет   в   объект   то   попросту   получать   ошибка   компиляция   видно   что   в   отличие   от   предыдущий   схема   нет   ничто   лишний   это   конечно   плюс   минус   такой   подход   являться   взаимодействие   компонент   но   впрочем   обычно   весь   взаимодействие   заключаться   в   передача   трансформация   при   такой   подход   мы   получать   большой   гибкость   но   все   же   недостаточный   для   удобный   управление   игровой   объект   и   такой   образ   мы   плавно   переходить   к   конечный   вариант   3   dynamic   component   object   aspect   oriented   object   dynamic   component   object   aspect   oriented   object   схема   основывать   на   динамически   связанный   компонент   здесь   и   далее   я   быть   называть   они   не   компонент   а   аспект   то   быть   весь   связанность   мочь   быть   создавать   и   разрушать   в   риалтайм   еще   этот   идея   напоминать   аспектно   ориентированный   построение   система   основной   идея   заключаться   в   то   что   такой   понятие   как   игровой   объект   вообще   атавизм   ненужный   вещь   лишний   связанность   который   только   мешать   по   начало   это   трудноватый   укладываться   в   голова   но   на   практика   это   оказываться   очень   удобный   теперь   когда   мы   избавляться   от   понятие   объект   нужно   подумать   как   обеспечивать   связанность   аспект   для   решение   этот   задача   можно   применять   обыкновенный   подписка   subscribe   link   в   наш   случай   подписывать   аспект   просто   повторять   трансформация   тот   на   кто   он   подписывать   конечно   с   учет   смещение   давать   предполагать   как   это   мочь   выглядеть   class   aspect   public   virtual   void   setposition   const   vec3   virtual   void   setorientation   const   vec4   virtual   const   vec3   getposition   const   virtual   const   vec4   getorientation   const   void   subscribe   const   aspect   void   unsubscribe   const   char   getname   const   const   char   getfullname   const   mname   mpantonimic   protected   aspect   mparent   const   char   mname   max _ name   const   char   mpantonimic   max _ name   class   graphics   public   aspect   implementation   class   physics   public   aspect   implementation   чтобы   пояснять   весь   происходить   давать   представлять   как   мочь   выглядеть   простой   объект   при   такой   подход   такой   род   объект   удобно   создавать   с   помощь   какой   нибудь   функция   принимать   на   вход   параметр   и   создавать   система   связанный   аспект   void   world   createobject   const   objectparams   params   uint32   i   params   getaspectcount   while   i   aspect   aspect   world   createaspect   params   getaspectparams   i   const   char   parent _ name   params   getaspectparent   i   aspect   subscribe   world   getaspect   parent _ name   такой   образ   мы   мочь   хранить   понятие   объект   где   то   в   файлик   скрипт   etc   а   для   сам   движок   быть   существовать   только   связанный   между   себя   аспект   и   ничто   больше   наверное   возникать   вопрос   зачем   весь   этот   хероверть   с   двойной   имя   в   аспект   это   вариант   решение   именование   объект   создавать   из   один   и   тот   же   параметр   предполагать   мы   хотеть   создавать   2   фонарик   light1   и   light2   если   бы   у   мы   быть   возможность   работать   только   с   один   имя   аспект   то   вставать   бы   вопрос   а   какой   аспект   к   какой   объект   принадлежать   то   быть   в   мир   бы   существовать   2   графический   и   2   световой   аспект   с   одинаковый   имя   фейл   при   добавление   отчество   имя   абстрактный   объект   к   аспект   мы   получать   возможность   иметь   в   мир   следующий   набор   компонент   light1   graphic   light2   graphic   light1   light   light2   light   теперь   мы   иметь   гибкий   система   сборка   игровой   объект   в   рантайм   с   вполне   адекватный   система   доступ   к   она   компонент   ну   и   в   конец   приводить   пример   реальный   файл   параметр   из   который   грузиться   и   создаваться   объект   cube   object   essences   type   physicsessence   name   physicscube   mass   4   shapes   shape _ type   st _ box   dim   1   1   1   type   graphicsessence   mesh _ name   f _ box   mesh   mesh _ scale   1   1   1   custom _ material _ name   13d   material   metalbox   name   graphicscube   parent _ name   physicscube   вот   пожалуй   и   все   что   я   хотеть   вы   рассказывать   enjoy   архитектура   игровой   объект   3   апрель   2011   обновление   3   июнь   2013   комментарий   426   убирать   реклама   раскрутка   аккаунт   и   накрутка   подписчик   вк   контакт   сообщество   участник   каталог   сайт   категория   архив   новость   gamedev   ru   разработка   игра   2001   2019