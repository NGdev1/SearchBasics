   физика   на   палец   обнаружение   столкновение   для   выпуклый   геометрия   физика   статья   программирование   игра   новость   статья   код   арт   дизайн   индустрия   подсказка   термин   FAQ   страница   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум   работа   входить   программированиестатьифизика   физика   на   палец   обнаружение   столкновение   для   выпуклый   геометрия   автор   александр   санников   обнаружение   столкновение   между   тело   один   из   принципиально   важный   момент   при   моделирование   игровой   физика   твердый   тело   причем   необходимо   не   просто   указывать   сам   факт   пересечение   но   и   предоставлять   конкретный   точка   и   нормаль   контакт   множество   который   называться   contact   manifold   после   многий   год   написание   собственный   физический   движок   я   приходить   к   алгоритм   который   хорошо   себя   зарекомендовать   как   очень   общий   и   достаточно   быстрый   алгоритм   генерирование   контактный   точка   введение   в   какой   случай   алгоритм   применимый   суть   алгоритм   дальнейший   усовершенствование   алгоритм   заключение   введение   алгоритм   работать   в   несколько   фаза   и   в   сеть   можно   находить   информация   по   аналогично   реализованный   некоторый   фаза   но   я   не   известно   о   реализация   полностью   аналогичный   мой   поэтому   постараться   описывать   в   что   же   заключаться   этот   алгоритм   в   один   из   свой   статья   Collision   Detection   для   геометрия   заданный   SupportMapping   ом   я   уже   рассказывать   о   подобный   алгоритм   для   двумерный   случай   к   сожаление   расширять   он   на   трехмерный   случай   вовсе   не   тривиальный   и   именно   о   то   как   это   сделать   пойти   речь   в   данный   статья   в   этот   статья   основной   внимание   быть   уделять   не   поиск   так   называть   разделять   ось   или   вектор   проникновение   с   это   относительно   неплохо   справляться   существующий   алгоритм   вроде   GJK   EPA   я   описывать   только   самый   простой   случай   для   многогранник   а   именно   процесс   получение   контактный   точка   по   находить   ось   к   сожаление   это   очень   важный   момент   уделяться   куда   мало   внимание   в   существующий   статья   в   какой   случай   алгоритм   применимый   алгоритм   искать   точка   контакт   только   для   выпуклый   геометрия   на   один   из   фаза   использоваться   support   mapping   или   как   он   еще   называть   механизм   геометрия   минковский   о   то   что   это   такой   можно   почитать   на   любой   другой   ресурс   либо   в   вышеозвучивать   статья   про   двумерный   collision   detection   расширение   support   mapping   а   с   2д   на   3д   проводиться   достаточно   легко   алгоритм   никак   не   учитывать   движение   тело   и   искать   точка   контакт   только   для   квазистатический   случай   считаться   что   тело   передвигаться   дискретный   временный   шаг   в   остальное   серьезный   ограничение   нет   алгоритм   мочь   строить   контактный   точка   для   сфера   эллипсоид   цилиндр   многогранник   и   любой   другой   выпуклый   геометрия   для   который   вы   удаваться   задавать   support   mapping   в   любой   сочетание   суть   алгоритм   весь   процесс   построение   контактный   точка   для   данный   пара   тело   геометрия   разбивать   на   последовательный   фаза   заключаться   они   в   следующий   1   фаза   первый   обнаружение   вектор   проникновение   Penetration   depth   или   как   он   иногда   не   совсем   точно   называть   separating   axis   это   вектор   в   проекция   на   который   геометрия   пересекаться   на   маленький   величина   если   находиться   такой   ось   в   проекция   на   который   геометрия   вообще   не   пересекаться   то   контактный   точка   не   генерироваться   алгоритм   заканчивать   свой   работа   один   из   следствие   теорема   о   разделять   ось   Separating   Axis   Theorem   SAT   являться   то   что   для   случай   контактировать   многогранник   этот   ось   всегда   быть   либо   нормаль   один   из   фейс   либо   вектороной   произведение   направлять   пара   ребро   где   один   ребро   принадлежать   один   многогранник   а   другой   другой   то   быть   для   случай   контактировать   многогранник   если   опускать   весь   оптимизация   алгоритм   поиск   SAT   сводиться   к   следующий   пара   действие   a   построить   массив   потенциальный   разделять   ось   состоять   из   весь   нормаль   фейс   и   весь   возможный   пара   ребро   б   посчитать   величина   пересечение   проекция   оба   геометрия   на   каждый   из   ось   ось   на   который   проекция   оказываться   минимальный   называть   разделять   опять   же   это   не   совсем   верно   так   как   геометрия   пересекаться   а   векторный   величина   пересечение   проекция   называть   penetration   depth   или   PD   замечать   что   если   первый   тело   сдвигать   на   вектор   PD   то   пересечение   нейтрализоваться   к   сожаление   физичный   это   сделать   невозможный   и   единственный   способ   раздвигать   тело   сгенерировать   контактный   точка   и   расталкивать   тело   в   каждый   контактный   точка   отдельно   это   быть   заниматься   солвер   к   конец   этот   фаза   мы   известный   вектор   PD   направление   который   на   рисунок   обозначать   красный   цвет   называть   он   axis   пусть   он   быть   указывать   от   первый   тело   обозначать   зеленый   в   сторона   второй   обозначать   синий   2   фаза   второй   в   этот   фаза   мы   построить   контактировать   площадка   каждый   из   геометрия   для   случай   многогранник   этот   площадка   называться   часть   или   фич   features   например   для   случай   контакт   ребро   фейс   между   два   бокс   контактный   фич   первый   бокс   ребро   контактный   фич   второй   фейс   для   это   построить   семейство   дополнительный   ось   auxAxes   i   несколько   отклонять   от   основной   находить   в   предыдущий   фаза   ось   количество   этот   ось   произвольно   чем   много   то   высокий   точность   алгоритм   но   тем   медленно   он   быть   работать   я   обычно   использовать   от   четыре   до   несколько   десяток   определять   координата   этот   ось   следующий   образ   for   int   i   0   i   axesCount   i   float   ang   2   0f   pi   float   axesCount   float   i   auxAxes   i   axis   n0   cos   ang   eps   n1   sin   ang   eps   Normalize   здесь   n0   и   n1   два   вектор   перпендикулярный   друг   друг   и   вектор   axis   eps   некоторый   малый   величина   подбирать   экспериментально   чем   она   больше   тем   широкий   быть   контактный   площадка   для   случай   контакт   гладкий   геометрия   вроде   эллипсоид   для   случай   многогранник   она   можно   выбирать   сколь   угодно   малый   отличный   от   ноль   лишь   бы   хватить   точность   вычисление   с   плавать   точка   получаться   вектор   все   они   axesCount   штука   быть   лежать   на   основание   конус   с   радиус   eps   высота   axis   и   с   вершина   в   начало   координата   чтобы   это   представлять   посмотреть   на   рисунок   красный   обозначать   исходный   ось   axis   оранжевый   семейство   дополнительный   ось   auxAxes   i   теперь   взять   support   point   ы   первый   геометрия   в   направление   auxAxes   i   а   для   второй   в   направление   auxAxes   i   так   как   ось   много   то   для   случай   многогранник   многий   точка   быть   совпадать   для   случай   гладкий   геометрия   быть   считать   совпадать   точка   находиться   близкий   некоторый   порог   такой   образ   для   каждый   тело   быть   находить   множество   точка   определять   контактировать   площадка   на   рисунок   контактный   площадка   для   первый   тело   обозначать   жирный   светло   зеленый   для   второй   жирный   темно   синий   в   случай   с   бокс   каждый   контактный   площадка   быть   состоять   либо   из   один   либо   из   два   либо   из   четыре   точка   соответвующий   контактный   фич   вершина   ребро   и   фейс   например   если   конактный   площадка   один   бокс   состоять   из   два   точка   а   другой   из   четыре   то   это   случай   контакт   вершина   фейс   алгоритм   построение   контактный   площадка   путем   отклонение   разделять   ось   называться   axis   rotation   3   фаза   третий   спроецировать   оба   контактный   площадка   в   плоскость   перпендикулярный   направление   axis   получать   два   плоский   многоугольник   далее   мы   должный   выделять   многоугольник   пересечение   так   как   площадка   выпуклый   вершина   многоугольник   пересечение   быть   вершина   первый   контактный   площадка   лежать   внутри   второй   вершина   второй   контактный   площадка   лежать   внутри   первый   и   весь   точка   пересечение   их   ребро   на   рисунок   площадка   пересечение   обозначать   красный   этот   операция   называться   2d   clipping   4   фаза   четвертый   последний   фаза   алгоритм   особенно   сложный   для   объяснение   так   как   требовать   от   я   незаурядный   изобразительный   навык   который   я   ясный   дело   не   обладать   то   не   менее   постараться   объяснять   в   этот   фаза   мы   должный   перевести   двумерный   площадка   пересечение   получать   на   предыдущий   фаза   обратно   в   три   измерение   вершина   этот   площадка   быть   кандидат   на   контактный   точка   чтобы   это   сделать   нужно   построить   два   вспомогательный   плоскость   один   плоскость   проходить   через   центр   масса   первый   контактный   площадка   второй   через   центр   масса   втора   нормаль   оба   плоскость   практически   совпадать   с   направление   penetration   depth   или   как   я   он   называть   axis   теперь   каждый   точка   пересечение   контактный   площадка   нужно   спроецировать   в   направление   axis   со   второй   плоскость   на   первый   рисунок   синий   точка   обозначать   точка   на   второй   плоскость   зеленый   соответствующий   они   точка   на   первый   плоскость   серый   стрелка   направление   проекция   черный   пунктир   линия   пересечение   плоскость   треугольник   с   плоскость   четырехугольник   они   иметь   право   пересекаться   так   как   они   нормаль   мочь   отличаться   на   eps   в   рассматривать   пример   три   из   четыре   точка   спроецироваться   в   направление   противополагать   axis   это   точка   который   не   лежать   на   пересечение   исходный   тело   они   мы   просто   выкидывать   то   не   менее   один   на   рисунок   она   внизу   спроецироваться   в   правильный   направление   она   и   являться   резульатат   работа   алгоритм   она   соответствовать   нормаль   axis   и   глубина   длина   проекция   показывать   серый   стрелка   в   общий   случай   алгоритм   мочь   сгенерить   в   два   раз   много   контактный   точка   чем   быть   построить   дополнительный   ось   на   второй   фаза   например   в   случай   если   один   цилиндр   при   контакт   точно   совпадать   с   основание   другой   цилиндр   столько   точка   едва   ли   необходимый   лишний   можно   просто   отбрасывать   практически   потому   что   точка   контактный   полигон   вообще   говорить   не   всегда   лежать   строго   в   один   плоскость   а   если   и   лежать   то   она   нормаль   должный   совпадать   с   axis   лишь   с   выбирать   погрешность   eps   поэтому   при   проецирование   точка   один   контактный   площадка   на   другой   я   бы   советовать   у   каждый   контактный   площадка   находить   центр   и   усреднять   нормаль   и   проецирование   точка   вести   именно   на   этот   усреднять   плоскость   если   же   коллизия   искаться   для   многогранник   вроде   бокс   то   контактный   площадка   совпадать   с   грань   ребро   точка   который   и   так   лежать   в   один   плоскость   и   этот   действие   излишний   дальнейший   усовершенствование   алгоритм   может   показываться   что   алгоритм   достаточно   громоздкий   и   вычислительный   тяжелый   на   самый   дело   это   не   так   он   действительно   не   очень   то   компактный   с   точка   зрение   объем   код   но   каждый   отдельный   фаза   вычислительный   легкий   для   случай   контактировать   многогранник   к   пример   первый   фаза   нахождение   разделять   ось   самый   вычислительный   тяжелый   хоть   и   иметь   целый   куча   готовый   реализация   весь   остальной   фаза   иметь   вычислительный   сложность   O   m   где   m   количество   вершина   контактный   площадка   что   для   любой   тримеш   равно   три   для   бокс   четыре   синус   и   косинус   во   второй   фаза   можно   затолкать   в   предрасчитывать   табличка   от   нормализация   можно   избавляться   так   как   весь   получать   вектор   иметь   одинаковый   длина   и   так   далее   для   многие   тип   геометрия   бокс   сфера   многогранник   можно   строить   контактный   площадка   просто   чем   использовать   подход   axis   rotation   из   второй   фаза   для   сфера   например   контактный   площадка   состоять   всегда   из   один   точка   для   многогранник   можно   перебирать   весь   вершина   и   выбирать   тот   область   вороной   который   включать   ось   axis   с   некоторый   погрешность   для   бокс   можно   отдельно   перебирать   сторона   ребро   и   вершина   в   остальное   производительность   алгоритм   при   нормальный   реализация   вполне   хватать   чтобы   быть   единственный   на   весь   случай   жизнь   еще   один   достаточно   важный   вопрос   который   я   опускать   поиск   PD   для   трехмерный   геометрия   заданный   support   mapping   ом   деталь   реализация   этот   алгоритм   я   пока   раскрывать   не   готовый   но   желающий   мочь   самостоятельно   попытаться   алгоритм   описывать   для   2д   ссылка   высоко   расширять   до   3д   это   существенно   просто   чем   гененрировать   контактный   точка   заключение   в   этот   статья   я   рассказывать   об   алгоритм   обнаружение   столкновение   в   3д   между   произвольный   выпуклый   тело   с   использование   механизм   геометрия   минковский   или   как   он   еще   называть   support   mapping   алгоритм   позволять   не   просто   устанавливать   сам   факт   контакт   но   и   позволять   получать   множество   необходимый   контактный   точка   алгоритм   одинаково   хорошо   себя   зарекомендовать   как   для   поиск   столкновение   между   многогранник   так   и   для   произвольный   гладкий   геометрия   минковский   эллипсоид   цилиндр   конус   collision   detection   contact   manifold   generation   polyhedra   SAT   separating   axis   theorem   9   октябрь   2012   обновление   21   дека   2012   комментарий   79   убирать   реклама   контакт   сообщество   участник   каталог   сайт   категория   архив   новость   GameDev   ru   разработка   игра   2001   2019