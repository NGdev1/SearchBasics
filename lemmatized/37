   Frustum   Culling   общий   статья   программирование   игра   новость   статья   код   арт   дизайн   индустрия   подсказка   термин   FAQ   страница   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум   работа   входить   программированиестатьиобщий   Frustum   Culling   автор   анатолий   герлиц   один   из   важный   оптимизация   в   компьютерный   игра   являться   отсечение   геометрия   не   видеть   на   экран   Frustum   Culling   далее   фрустум   кулинг   раз   мы   все   равный   не   увидеть   объект   то   и   не   зачем   тратить   ресурс   компьютер   на   его   подготовка   и   отрисовка   в   этот   статья   я   затрагивать   следующий   тема   кулинг   сфера   Bounding   Sphere   AABB   axis   aligned   bounding   box   OBB   oriented   Bounding   Box   кулинг   большой   количество   объект   применение   SSE   многопоточный   кулинг   кулинг   на   сторона   GPU   сравнение   по   скорость   весь   метод   что   не   быть   затрагивать   использование   иерархия   дерево   можно   объединять   объект   в   достаточно   большой   группа   по   территориальный   признак   и   сперва   определять   их   видимость   различный   оптимизация   для   один   объект   вроде   запоминание   удачный   плоскость   отсечение   тест   с   учет   буфер   глубина   объект   мочь   попадать   во   фрустум   но   при   это   быть   полностью   загораживать   другой   много   близкий   к   камера   объект   следовательно   он   тоже   можно   быть   бы   не   рисовать   софтверный   кулинг   можно   определять   загороженность   объект   другой   объект   на   сторона   CPU   кулинг   для   тень   простой   кулинг   иметь   область   видимость   заданный   фрустум   или   пирамида   видимость   объект   не   попадать   в   он   следовать   отбрасывать   и   не   посылать   на   рендер   фрустум   удобно   задавать   6   плоскость   frustum _ planes   иметь   объект   на   сцена   каждый   объект   можно   аппроксимировать   простой   геометрия   например   сфера   бокс   BoundingSphere   BoundingBox   весь   геометрия   объект   лежать   внутри   этот   примитив   окружать   примитив   тест   на   видимость   такой   простой   геометрия   проходить   очень   быстро   наш   задача   являться   понимать   находиться   ли   указанный   примитив   вне   фрустум   рассматривать   определение   видимость   сфера   бокс   бокс   бывать   разный   ориентированный   по   мировой   ось   AABB   axis   aligned   bounding   box   и   ориентировать   по   локальный   ось   объект   OBB   oriented   Bounding   Box   видно   что   OBB   хорошо   аппроксимировать   объект   но   при   это   тест   на   видимость   сложно   чем   ABB   сфера   фрустум   алгоритм   для   центр   объект   находить   его   расстояние   до   каждый   плоскость   фрустум   если   точка   находиться   сзади   плоскость   далеко   чем   радиус   сфера   то   очевидно   что   сфера   не   попадать   в   область   видимость   данный   плоскость   становиться   отсекать  __ forceinline   bool   SphereInFrustum   vec3   pos   float   radius   vec4   frustum _ planes   bool   res   true   тестировать   6   плоскость   фрустум   for   int   i   0   i   6   i   считать   расстояние   от   центр   сфера   до   плоскость   если   центр   сфера   находиться   за   плоскость   и   расстояние   большой   чем   радиус   сфера   то   объект   не   попадать   во   фрустум   if   frustum _ planes   i   x   pos   x   frustum _ planes   i   y   pos   y   frustum _ planes   i   z   pos   z   frustum _ planes   i   w   radius   res   false   return   false   флаг   работать   быстро   return   res   return   true   AABB   фрустум   окружающий   сфера   не   всегда   точно   аппроксимировать   объект   для   более   точный   тесто   часто   использовать   аппроксимировать   бокс   бокс   бывать   разный   ориентированный   по   мировой   ось   AABB   и   ориентировать   по   локальный   ось   объект   OBB   общий   идея   тесто   бокс   если   весь   8   точка   бокс   находиться   за   какой   либо   плоскость   фрустум   то   бокс   не   попадать   во   фрустум   в   следующий   пример   приводиться   тест   ABB   фрустум   но   если   подставлять   world   space   точка   в   уравнение   то   получать   тест   OBB   фрустум  __ forceinline   bool   RightParallelepipedInFrustum2   vec4   Min   vec4   Max   vec4   frustum _ planes   этот   код   показывать   общий   идея   как   работать   кулинг   бокс   AABB   и   OBB   Min   Max   2   точка   AABB   в   мировой   пространство   мы   мочь   трансформировать   8   точка   бокс   в   мировой   пространство   и   подставлять   вместо   Min   и   Max   в   уравнение   получать   кулинг   OBB   фрустум   тестировать   6   плоскость   фрустум   for   int   i   0   i   6   i   пробовать   находить   такой   плоскость   для   который   весь   8   точка   находиться   за   она   тестировать   8   точка   бокс   считать   расстояние   от   точка   до   плоскость   если   точка   впереди   плоскость   то   данный   плоскость   не   являться   разделять   if   frustum _ planes   i   0   Min   0   frustum _ planes   i   1   Max   1   frustum _ planes   i   2   Min   2   frustum _ planes   i   3   0   continue   if   frustum _ planes   i   0   Min   0   frustum _ planes   i   1   Max   1   frustum _ planes   i   2   Max   2   frustum _ planes   i   3   0   continue   if   frustum _ planes   i   0   Max   0   frustum _ planes   i   1   Max   1   frustum _ planes   i   2   Max   2   frustum _ planes   i   3   0   continue   if   frustum _ planes   i   0   Max   0   frustum _ planes   i   1   Max   1   frustum _ planes   i   2   Min   2   frustum _ planes   i   3   0   continue   if   frustum _ planes   i   0   Max   0   frustum _ planes   i   1   Min   1   frustum _ planes   i   2   Min   2   frustum _ planes   i   3   0   continue   if   frustum _ planes   i   0   Max   0   frustum _ planes   i   1   Min   1   frustum _ planes   i   2   Max   2   frustum _ planes   i   3   0   continue   if   frustum _ planes   i   0   Min   0   frustum _ planes   i   1   Min   1   frustum _ planes   i   2   Max   2   frustum _ planes   i   3   0   continue   if   frustum _ planes   i   0   Min   0   frustum _ planes   i   1   Min   1   frustum _ planes   i   2   Min   2   frustum _ planes   i   3   0   continue   если   весь   вершина   бокс   находиться   за   плоскость   то   мы   находить   разделять   плоскость   объект   находиться   вне   фрустум   return   false   если   не   находить   разделять   плоскость   то   считать   что   объект   видимый   return   true   тест   AABB   фрустум   можно   сделать   более   оптимально   алгоритм   находить   близкий   из   8   точка   к   плоскость   и   проверять   находиться   ли   она   за   плоскость   если   да   то   объект   находиться   вне   фрустум  __ forceinline   bool   RightParallelepipedInFrustum   vec4   Min   vec4   Max   vec4   frustum _ planes   bool   inside   true   тестировать   6   плоскость   фрустум   for   int   i   0   i   6   i   находить   близкий   к   плоскость   вершина   проверять   если   она   находиться   за   плоскость   то   объект   вне   врустум   float   d   max   Min   x   frustum _ planes   i   x   Max   x   frustum _ planes   i   x   max   Min   y   frustum _ planes   i   y   Max   y   frustum _ planes   i   y   max   Min   z   frustum _ planes   i   z   Max   z   frustum _ planes   i   z   frustum _ planes   i   w   inside   d   0   return   false   флаг   работать   быстро   если   не   находить   разделять   плоскость   считать   объект   видеть   return   inside   OBB   фрустум   алгоритм   трансформировать   8   точка   бокс   из   локальный   система   координата   сразу   в   clip   space   так   легко   проверять   на   нахождение   за   плоскость   фрустум   т   к   в   этот   пространство   фрустум   представлять   себя   единичный   куб   1   1   нужно   учитывать   что   для   DirectX   по   Z   координата   0   1   соответственно   если   по   какой   либо   ось   все   8   вершина   либо   1   либо   1   то   весь   объект   находиться   вне   фрустум  __ forceinline   bool   OBBInFrustum   const   vec3   Min   const   vec3   Max   mat4   obj _ transform _ mat   mat4   cam _ modelview _ proj _ mat   трансформировать   8   вершина   бокс   сразу   в   clip   space   в   clip   space   пространство   фрустум   представлять   себя   ортонормированный   единичный   куб   1   1   можно   очень   легкий   понимать   находиться   ли   все   8   вершина   за   какой   либо   плоскость   пометка   в   DirectX   по   ось   z   clip   box   иметь   размер   0   1   вместо   1   1   как   в   OpenGL   это   стоить   учитывать   в   код   матрица   трансформация   точка   в   clip   space   mat4   to _ clip _ space _ mat   cam _ modelview _ proj _ mat   obj _ transform _ mat   трансформировать   8   локальный   точка   бокс   в   clip   space   vec4   obb _ points   8   obb _ points   0   to _ clip _ space _ mat   vec4   Min   0   Max   1   Min   2   1   f   obb _ points   1   to _ clip _ space _ mat   vec4   Min   0   Max   1   Max   2   1   f   obb _ points   2   to _ clip _ space _ mat   vec4   Max   0   Max   1   Max   2   1   f   obb _ points   3   to _ clip _ space _ mat   vec4   Max   0   Max   1   Min   2   1   f   obb _ points   4   to _ clip _ space _ mat   vec4   Max   0   Min   1   Min   2   1   f   obb _ points   5   to _ clip _ space _ mat   vec4   Max   0   Min   1   Max   2   1   f   obb _ points   6   to _ clip _ space _ mat   vec4   Min   0   Min   1   Max   2   1   f   obb _ points   7   to _ clip _ space _ mat   vec4   Min   0   Min   1   Min   2   1   f   bool   outside   false   outside _ positive _ plane   outside _ negative _ plane   иметь   6   плоскость   отсечение   3   потому   что   тестировать   2   плоскость   за   раз   1   и   1   for   int   i   0   i   3   i   находиться   ли   все   8   точка   за   плоскость   в   общий   то   в   приводить   код   можно   быть   выполнять   нормализация   координата   деление   на   w   xyz   w   после   что   сравнивать   с   1   и   1   если   координата   1   или   1   то   объект   вне   фрустум   outside _ positive _ plane   obb _ points   0   i   obb _ points   0   w   obb _ points   1   i   obb _ points   1   w   obb _ points   2   i   obb _ points   2   w   obb _ points   3   i   obb _ points   3   w   obb _ points   4   i   obb _ points   4   w   obb _ points   5   i   obb _ points   5   w   obb _ points   6   i   obb _ points   6   w   obb _ points   7   i   obb _ points   7   w   для   DirectX   для   z   координата   i   3   следовать   сравнивать   с   0   outside _ negative _ plane   obb _ points   0   i   obb _ points   0   w   obb _ points   1   i   obb _ points   1   w   obb _ points   2   i   obb _ points   2   w   obb _ points   3   i   obb _ points   3   w   obb _ points   4   i   obb _ points   4   w   obb _ points   5   i   obb _ points   5   w   obb _ points   6   i   obb _ points   6   w   obb _ points   7   i   obb _ points   7   w   outside   outside   outside _ positive _ plane   outside _ negative _ plane   if   outside _ positive _ plane   outside _ negative _ plane   return   false   return   outside   return   true   таблица   1   кулинг   100к   объект   Intel   Core   i5   4460   3   2GHz   1   поток   время   в   ms   Simple   Culling   Sphere   AABB   OBB   только   кулинг   0   92   1   42   9   14   весь   кадр   1   94   2   5   10   3   результат   очевидный   чем   сложный   вычисление   тем   медленный   зато   получать   точно   кулинг   кулинг   OBB   заметно   медленно   кулинг   сфера   и   AABB   возможно   оптимальный   решение   являться   разделение   объект   на   группа   для   каждый   группа   в   зависимость   от   расстояние   до   камера   можно   использовать   свой   примитив   для   самый   ближний   использовать   точный   тест   OBB   фрустум   для   группа   далеко   использовать   AABB   фрустум   для   совсем   дальний   группа   использовать   тест   сфера   фрустум   также   следовать   замечать   что   время   весь   кадр   гораздо   высокий   чем   кулинг   отдельно   в   среднее   чуть   много   1   ms   сюда   входить   время   пересылка   данные   видимый   инстанс   на   GPU   несколько   дип   и   апи   команда   но   то   не   менее   это   необходимый   действие   страница   1   2   3   4   5   следующий   Frustum   Culling   multithreading   SSE   8   февраль   2017   обновление   31   дека   2018   комментарий   65   убирать   реклама   контакт   сообщество   участник   каталог   сайт   категория   архив   новость   GameDev   ru   разработка   игра   2001   2019