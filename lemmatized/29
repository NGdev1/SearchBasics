   Vulkan   API   Hello   Triangle   график   статья   программирование   игра   новость   статья   код   арт   дизайн   индустрия   подсказка   термин   FAQ   страница   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум   работа   входить   программированиестатьиграфика   Vulkan   API   Hello   Triangle   автор   The   Player   статья   описывать   основной   принцип   работа   с   Vulkan   API   и   включать   в   себя   материал   по   установка   SDK   обработка   ошибка   работа   с   различный   сущность   API   и   краткий   курс   по   вывод   треугольник   в   качество   практический   часть   работа   позиционировать   себя   как   быстрый   экскурс   в   основа   Vulkan   API   не   претендовать   на   полнота   и   оставлять   деталь   на   самостоятельный   рассмотрение   для   хороший   понимание   материал   крайне   рекомендоваться   использовать   документация   с   официальный   сайт   https   www   khronos   org   registry   vulkan   вступление   подготовка   установка   SDK   консольный   проект   окно   обработка   ошибка   результат   выполнение   слой   фундаментальный   объект   образец   интерфейс   отчет   об   ошибка   физический   устройство   логический   устройство   поверхность   вывод   и   цепочка   обмен   поддержка   Win32   поверхность   вывод   цепочка   обмен   пасс   вывод   буфер   кадр   и   вид   изображение   вид   изображение   буфер   кадр   команда   очередь   команда   пул   команда   буфер   команда   запись   буфер   ограждение   и   обновление   экран   ограждение   обновление   экран   буфер   и   память   буфер   память   передача   информация   о   вершина   на   GPU   шейдер   исходный   код   шейдерный   модуль   конвейер   планировка   и   кеш   конвейер   этап   и   состояние   графический   конвейер   этап   обработка   примитив   информация   о   вершина   информация   о   режим   рисование   состояние   выводить   область   этап   растеризация   этап   множественный   выборка   этап   тесто   глубина   и   трафарет   этап   смешивание   создание   конвейер   модификация   командный   буфер   вступление   в   связь   с   большой   количество   код   присущий   Vulkan   API   ради   облегчение   понимание   происходить   структура   программа   не   быть   разделять   на   модуль   или   оборачивать   в   класс   ровно   как   и   не   быть   производиться   освобождение   ресурс   и   обработка   сопутствовать   этот   процесс   ошибка   статья   требовать   понимание   базовый   принцип   программирование   на   с   с   и   уровень   знакомство   с   WinAPI   достаточный   для   создание   окно   и   работа   с   он   также   необходимый   опыт   в   работа   со   среда   разработка   Visual   Studio   2013   материал   по   этот   тема   не   быть   включать   в   данный   работа   т   к   мочь   быть   легко   находить   в   сеть   подготовка   для   простой   демонстрация   Vulkan   API   вывод   треугольник   мы   потребоваться   устанавливать   LunarG   Vulkan   SDK   создавать   консоль   для   вывод   ошибка   и   лог   а   также   окно   WinAPI   в   который   бы   и   осуществляться   вывод   установка   SDK   поскольку   сам   Vulkan   API   реализовывать   непосредственно   на   уровень   драйвер   доступ   к   он   функционал   мочь   быть   получать   посредством   динамический   библиотека   dynamic   linked   library   dll   специфический   для   разработчик   видеокарта   Intel   NVidia   AMD   etc   LunarG   Vulkan   SDK   загрузчик   проделывать   этот   работа   за   мы   и   предоставлять   унифицировать   интерфейс   с   эго   помощь   мы   не   надо   заботиться   о   то   какой   именно   dll   загружать   скачать   установщик   LunarG   Vulkan   SDK   можно   на   официальный   сайт   https   vulkan   lunarg   com   сам   себя   для   работа   с   любой   версия   Vulkan   API   необходимый   не   только   SDK   но   и   соответствующий   драйвер   специфический   для   производитель   видеокарта   также   важный   то   что   иметь   SDK   определенный   версия   мы   мочь   ограничивать   использование   драйвер   более   низкий   при   написание   статья   использоваться   версия   SDK   1   0   21   1   после   установка   SDK   весь   необходимый   мы   файл   мочь   быть   находить   в   соответствующий   каталог   C   VulkanSDK   версия   SDK   по   умолчание   в   первый   очередь   мы   интересовать   заголовочный   файл   папка   vulkan   целиком   который   находиться   в   каталог   Include   и   файл   библиотека   файл   vulkan   1   lib   в   каталог   Bin   Bin32   иметь   они   на   рука   мы   мочь   приступать   к   создание   консоль   и   окно   консольный   проект   мы   потребоваться   обычный   консольный   проект   для   вывод   информация   обо   все   происходить   а   также   для   оповещение   о   ошибка   процесс   его   создание   не   быть   освещать   в   статья   т   к   мочь   быть   легко   находить   в   сеть   первый   дело   необходимо   убеждаться   в   работоспособность   проект   include   iostream   void   main   system   pause   затем   скопировать   в   папка   с   проект   где   размещать   vcxproj   файл   а   не   sln   весь   необходимый   мы   файл   т   е   папка   заголовочный   файл   vulkan   и   библиотечный   файл   vulkan   1   lib   убеждаться   в   работоспособность   подключать   файл   include   vulkan   vulkan   h   pragma   comment   lib   vulkan   1   lib   на   данный   этап   окно   не   являться   для   мы   чем   то   необходимый   но   мы   бегло   рассматривать   код   его   создание   сейчас   дабы   не   возвращаться   к   этот   тема   во   время   изучение   Vulkan   API   окно   для   работа   с   окно   мы   необходимо   подключать   WinAPI   include   Windows   h   также   мы   необходимо   получать   образец   instance   наш   программа   в   контекст   WinAPI   auto   handleInstance   GetModuleHandleA   nullptr   окно   auto   handleWindow   auto   windowClassName   window   class   WNDCLASSA   windowClassInfo   windowClassInfo   style   CS _ HREDRAW   CS _ VREDRAW   CS _ OWNDC   windowClassInfo   lpfnWndProc   DefWindowProcA   windowClassInfo   cbClsExtra   0   windowClassInfo   cbWndExtra   0   windowClassInfo   hInstance   handleInstance   windowClassInfo   hIcon   nullptr   windowClassInfo   hCursor   nullptr   windowClassInfo   hbrBackground   nullptr   windowClassInfo   lpszMenuName   nullptr   windowClassInfo   lpszClassName   windowClassName   if   RegisterClassA   windowClassInfo   throw   std   exception   failed   to   register   window   class   auto   handle   CreateWindowA   windowClassName   window   WS _ OVERLAPPEDWINDOW   WS _ VISIBLE   0   0   800   600   nullptr   nullptr   handleInstance   nullptr   if   handle   throw   std   exception   failed   to   create   window   return   handle   и   обрабатывать   сообщение   адресовать   этот   окно   while   true   MSG   msg   while   PeekMessage   msg   handleWindow   0   0   PM _ REMOVE   TranslateMessage   msg   DispatchMessage   msg   описание   этот   функция   упускаться   умышленно   т   к   они   не   являться   предмет   данный   статья   весь   необходимый   информация   по   они   можно   легко   находить   в   сеть   обработка   ошибка   в   условие   большой   количество   код   т   е   в   условие   Vulkan   API   жизненно   необходимо   правильно   отлавливать   ошибка   важность   понимание   этот   процесс   столь   большой   что   обработка   ошибка   быть   описывать   в   отдельный   раздел   этот   статья   мы   не   быть   рассматривать   логический   ошибка   вроде   передача   в   качество   аргумент   вектор   на   10   элемент   когда   в   действительность   он   рассчитать   всего   лишь   на   5   но   рассматривать   способ   находить   они   в   некоторый   ситуация   в   случай   передача   несовместимый   параметр   так   же   мы   рассматривать   способ   выявление   ошибка   который   можно   отлавливать   в   инженерный   версия   программа   а   также   тот   который   мочь   различаться   для   видеокарта   разный   производитель   в   конечный   счет   мы   получать   инструмент   для   составление   детальный   отчет   об   ошибка   в   debug   версия   приложение   результат   выполнение   простой   и   самый   грубый   способ   отлов   ошибка   в   Vulkan   API   являться   возвращать   значение   функция   они   иметь   тип   VkResult   который   позволять   определять   успех   выполнение   VK _ SUCCESS   например   означать   отсутствие   ошибка   такой   механизм   являться   достаточно   простой   способный   указывать   на   грубый   ошибка   или   ляп   то   не   менее   он   оказываться   недостаточно   для   детальный   анализ   слой   в   большинство   случай   детальный   анализ   ошибка   и   большой   количество   проверка   допустимый   только   в   debug   версия   приложение   фокус   заключаться   в   то   что   release   версия   не   должный   содержать   ошибка   по   определение   а   потому   и   тратить   лишний   ресурс   на   их   проверка   нет   смысл   с   другой   сторона   debug   версия   должный   предоставлять   не   только   сам   факт   наличие   ошибка   но   и   более   менее   развертывать   описание   к   счастие   Vulkan   API   разрабатываться   отталкиваться   именно   от   такой   идеология   слой   набор   опциональный   модуль   предназначать   для   проверка   корректность   соответствие   стандарт   использование   Vulkan   API   их   наличие   и   реализация   зависеть   от   версия   API   и   видеокарта   а   потому   их   использование   носить   отладочный   характер   они   не   включаться   в   release   версия   приложение   еще   один   важный   нюанс   являться   то   что   для   образец   и   устройство   Vulkan   API   слой   различаться   доступный   для   образец   слой   перечисляться   следующий   образ   VkResult   vkEnumerateInstanceLayerProperties   uint32 _ t   pPropertyCount   VkLayerProperties   pProperties   если   pProperties   равный   ноль   функция   записывать   по   адрес   pPropertyCount   количество   доступный   слой   в   противный   случай   функция   заполнять   данные   по   адрес   pProperties   массив   элемент   тип   VkLayerProperties   в   количество   записывать   по   адрес   pPropertyCount   доступный   для   устройство   слой   перечисляться   схожий   функция   VkResult   vkEnumerateDeviceLayerProperties   VkPhysicalDevice   physicalDevice   uint32 _ t   pPropertyCount   VkLayerProperties   pProperties   она   работать   аналогично   с   поправка   на   то   что   нужно   указывать   физический   устройство   о   который   мы   узнавать   поздно   фундаментальный   объект   прежде   чем   приступать   к   непосредственный   вывод   график   мы   необходимо   создавать   серия   абстрактный   объект   который   являться   фундамент   для   дальнейший   работа   в   общий   черта   наш   план   выглядеть   следующий   образ   подготовить   список   слой   и   расширение   для   образец   интерфейс   создавать   образец   интерфейс   инициализировать   получение   отчет   об   ошибка   перечислять   весь   иметься   физический   устройство   подготовить   список   слой   и   расширение   для   логический   устройство   на   основа   любой   физический   устройство   создавать   логический   устройство   но   для   начало   ознакомляться   с   функционал   образец   интерфейс   первый   необходимый   мы   объект   являться   образец   интерфейс   instance   Vulkan   API   он   содержать   в   себя   базовый   информация   о   наш   приложение   необходимый   для   его   работа   слой   и   расширение   VkResult   vkCreateInstance   const   VkInstanceCreateInfo   pCreateInfo   const   VkAllocationCallbacks   pAllocator   VkInstance   pInstance   функция   принимать   информация   о   наш   образец   храниться   по   адрес   pCreateInfo   и   в   случай   отсутствие   ошибка   инициализировать   он   по   адрес   pInstance   параметр   pAllocator   в   предел   этот   статья   мы   рассматривать   не   быть   а   потому   в   качество   он   всегда   быть   передавать   нулевой   указатель   структура   VkInstanceCreateInfo   выглядеть   следующий   образ   typedef   struct   VkInstanceCreateInfo   VkStructureType   sType   const   void   pNext   VkInstanceCreateFlags   flags   const   VkApplicationInfo   pApplicationInfo   uint32 _ t   enabledLayerCount   const   char   const   ppEnabledLayerNames   uint32 _ t   enabledExtensionCount   const   char   const   ppEnabledExtensionNames   VkInstanceCreateInfo   sType   и   pNext   ровно   как   и   структура   тип   Vk   CreateInfo   являться   часто   встречать   объект   Vulkan   API   они   служить   для   минимизация   аргумент   функция   при   передача   параметр   поле   sType   говорить   о   то   к   какой   тип   принадлежать   конкретный   структура   Vk   CreateInfo   для   пример   значение   sType   для   структура   тип   VkInstanceCreateInfoдолжно   быть   равный   VK _ STRUCTURE _ TYPE _ INSTANCE _ CREATE _ INFO   поле   pNext   в   большинство   случай   являться   зарезервировать   для   использование   в   будущий   потому   он   следовать   инициализировать   нулевой   указатель   кроме   исключительный   ситуация   т   к   подобный   конструкция   встречаться   довольно   таки   часто   мы   больше   не   быть   возвращаться   к   их   описание   поле   flags   зарезервировать   для   использование   в   будущий   и   должно   быть   равный   ноль   pApplicationInfo   указатель   на   структура   содержать   информация   о   приложение   enabledLayerCount   и   ppEnabledLayerNames   количество   слой   и   указатель   на   массив   они   название   enabledExtensionCount   и   ppEnabledExtensionNames   количество   и   название   расширение   много   все   здесь   мы   интересовать   указатель   на   структура   с   информация   о   приложение   pApplicationInfo   typedef   struct   VkApplicationInfo   VkStructureType   sType   const   void   pNext   const   char   pApplicationName   uint32 _ t   applicationVersion   const   char   pEngineName   uint32 _ t   engineVersion   uint32 _ t   apiVersion   VkApplicationInfo   хотя   исходить   из   спецификация   pApplicationInfo   при   желание   можно   обнулять   делать   это   не   стоить   некоторый   бессовестный   вендор   требовать   наличие   информация   о   приложение   поле   pApplicationName   и   applicationVersion   указывать   на   название   приложение   и   его   версия   а   pEngineName   и   engineVersion   соответственно   на   название   и   версия   движок   apiVersion   содержать   информация   о   версия   Vulkan   API   использовать   в   приложение   и   формироваться   макрос   VK _ MAKE _ VERSION   теперь   можно   приступать   к   создание   образец   интерфейс   для   начало   нужно   подготовить   список   слой   std   vector   const   char   layerNames   VK _ LAYER _ LUNARG _ core _ validation   и   расширение   std   vector   const   char   extensionNames   VK _ EXT _ DEBUG _ REPORT _ EXTENSION _ NAME   заполнять   информация   о   приложение   VkApplicationInfo   vk _ applicationInfo   vk _ applicationInfo   sType   VkStructureType   VK _ STRUCTURE _ TYPE _ APPLICATION _ INFO   vk _ applicationInfo   pNext   nullptr   vk _ applicationInfo   pApplicationName   Application   name   vk _ applicationInfo   applicationVersion   1   vk _ applicationInfo   pEngineName   Engine   name   vk _ applicationInfo   engineVersion   1   vk _ applicationInfo   apiVersion   VK _ MAKE _ VERSION   1   0   21   и   собственно   информация   для   создание   образец   интерфейс   VkInstanceCreateInfo   vk _ instanceCreateInfo   vk _ instanceCreateInfo   sType   VkStructureType   VK _ STRUCTURE _ TYPE _ INSTANCE _ CREATE _ INFO   vk _ instanceCreateInfo   pNext   nullptr   vk _ instanceCreateInfo   flags   0   vk _ instanceCreateInfo   pApplicationInfo   vk _ applicationInfo   vk _ instanceCreateInfo   enabledLayerCount   layerNames   size   vk _ instanceCreateInfo   ppEnabledLayerNames   layerNames   data   vk _ instanceCreateInfo   enabledExtensionCount   extensionNames   size   vk _ instanceCreateInfo   ppEnabledExtensionNames   extensionNames   data   когда   все   готовый   можно   создавать   образец   интерфейс   if   vkCreateInstance   vk _ instanceCreateInfo   nullptr   vk _ instance   VkResult   VK _ SUCCESS   throw   std   exception   failed   to   create   vk   instance   отчет   об   ошибка   отчет   об   ошибка   мощный   инструмент   который   позволять   получать   информация   от   слой   использовать   функция   обратный   вызов   callback   как   и   любой   другой   объект   Vulkan   API   отчет   рассматриваться   как   объект   и   иметь   соответствующий   функция   для   создание   и   структура   для   описание   отличие   в   то   что   функция   для   создание   отчет   мы   быть   получать   с   помощь   vkGetInstanceProcAddr   auto   vk _ vkCreateDebugReportCallbackEXT   PFN _ vkCreateDebugReportCallbackEXT   vkGetInstanceProcAddr   vk _ instance   vkCreateDebugReportCallbackEXT   получать   мы   функция   иметь   следующий   вид   VkResult   vkCreateDebugReportCallbackEXT   VkInstance   instance   const   VkDebugReportCallbackCreateInfoEXT   pCreateInfo   const   VkAllocationCallbacks   pAllocator   VkDebugReportCallbackEXT   pCallback   она   не   нарушать   традиция   инициализировать   объект   опираться   на   информация   из   описание   и   сигнализировать   о   любой   ошибка   посредством   возвращать   значение   единственный   отличие   теперь   нужно   указывать   образец   интерфейс   к   который   быть   привязывать   наш   отчет   typedef   struct   VkDebugReportCallbackCreateInfoEXT   VkStructureType   sType   const   void   pNext   VkDebugReportFlagsEXT   flags   PFN _ vkDebugReportCallbackEXT   pfnCallback   void   pUserData   VkDebugReportCallbackCreateInfoEXT   flags   состоять   из   битовый   операция   над   значение   enum   а   VkDebugReportFlagBitsEXT   эго   значение   говорить   о   то   при   какой   род   отчет   быть   вызываться   наш   функция   pfnCallback   соответственно   указывать   на   то   какой   функция   следовать   вызывать   а   с   помощь   pUserData   мы   мочь   передавать   в   отчет   какой   нибудь   информация   извне   итак   преступать   к   создание   отчет   VkDebugReportCallbackEXT   vk _ debugReportCallbackEXT   VkDebugReportCallbackCreateInfoEXT   vk _ debugReportCallbackCreateInfoEXT   vk _ debugReportCallbackCreateInfoEXT   sType   VkStructureType   VK _ STRUCTURE _ TYPE _ DEBUG _ REPORT _ CALLBACK _ CREATE _ INFO _ EXT   vk _ debugReportCallbackCreateInfoEXT   pNext   nullptr   vk _ debugReportCallbackCreateInfoEXT   flags   VkDebugReportFlagBitsEXT   VK _ DEBUG _ REPORT _ INFORMATION _ BIT _ EXT   VkDebugReportFlagBitsEXT   VK _ DEBUG _ REPORT _ WARNING _ BIT _ EXT   VkDebugReportFlagBitsEXT   VK _ DEBUG _ REPORT _ PERFORMANCE _ WARNING _ BIT _ EXT   VkDebugReportFlagBitsEXT   VK _ DEBUG _ REPORT _ ERROR _ BIT _ EXT   VkDebugReportFlagBitsEXT   VK _ DEBUG _ REPORT _ DEBUG _ BIT _ EXT   vk _ debugReportCallbackCreateInfoEXT   pfnCallback   VkDebugReportFlagsEXT   flags   VkDebugReportObjectTypeEXT   objectType   uint64 _ t   object   size _ t   location   int32 _ t   messageCode   const   char   pLayerPrefix   const   char   pMessage   void   pUserData   VkBool32   std   cout   if   flags   VkDebugReportFlagBitsEXT   VK _ DEBUG _ REPORT _ INFORMATION _ BIT _ EXT   0   std   cout   INFO   if   flags   VkDebugReportFlagBitsEXT   VK _ DEBUG _ REPORT _ WARNING _ BIT _ EXT   0   std   cout   WARNING   if   flags   VkDebugReportFlagBitsEXT   VK _ DEBUG _ REPORT _ PERFORMANCE _ WARNING _ BIT _ EXT   0   std   cout   PERFORMANCE   if   flags   VkDebugReportFlagBitsEXT   VK _ DEBUG _ REPORT _ DEBUG _ BIT _ EXT   0   std   cout   DEBUG   if   flags   VkDebugReportFlagBitsEXT   VK _ DEBUG _ REPORT _ ERROR _ BIT _ EXT   0   std   cout   ERROR   std   cout   std   cout   pLayerPrefix   pMessage   std   endl   return   VK _ FALSE   vk _ debugReportCallbackCreateInfoEXT   pUserData   nullptr   if   vk _ vkCreateDebugReportCallbackEXT   vk _ instance   vk _ debugReportCallbackCreateInfoEXT   nullptr   vk _ debugReportCallbackEXT   VkResult   VK _ SUCCESS   throw   std   exception   failed   to   create   debug   collback   последний   и   наиболее   важный   момент   являться   вид   функция   обработчик   отчет   pfnCallback   обработчик   вызываться   каждый   раз   когда   один   из   слой   информировать   или   предупреждать   пользователь   о   наличие   ошибка   через   параметр   передаваться   разный   род   информация   пока   что   мы   быть   интересовать   только   имя   слой   который   вызывать   который   отправлять   отчет   pLayerPrefix   и   текст   отчет   pMessage   как   видно   наш   лямбда   функция   попросту   выводить   сообщение   отчет   на   консоль   физический   устройство   иметь   образец   интерфейс   мы   мочь   перечислять   весь   физический   устройство   видеокарта   если   вы   угодно   с   Vulkan   API   на   борт   подобный   перечисление   производить   следующий   функция   VkResult   vkEnumeratePhysicalDevices   VkInstance   instance   uint32 _ t   pPhysicalDeviceCount   VkPhysicalDevice   pPhysicalDevices   как   и   в   предыдущий   случай   она   принимать   в   качество   аргумент   образец   интерфейс   instance   указатель   на   количество   физический   устройство   к   перечисление   pPhysicalDeviceCount   и   указатель   на   массив   для   запись   информация   об   устройство   pPhysicalDevices   если   последний   параметр   равный   нулевой   указатель   функция   записывать   по   адрес   pPhysicalDeviceCount   количество   доступный   физический   устройство   в   противный   случай   функция   заполнять   массив   информация   о   соответствующий   устройство   как   не   трудно   догадываться   физический   устройство   мочь   быть   несколько   например   интегрировать   и   дискретный   видеокарта   на   ноутбук   поскольку   мы   нужно   лишь   один   мы   всегда   быть   выбирать   первый   попадаться   VkPhysicalDevice   vk _ physicalDevice   uint32 _ t   vk _ physicalDevicesCount   if   vkEnumeratePhysicalDevices   vk _ instance   vk _ physicalDevicesCount   nullptr   VkResult   VK _ SUCCESS   throw   std   exception   failed   to   get   physical   devices   count   std   vector   VkPhysicalDevice   vk _ physicalDevices   vk _ physicalDevicesCount   if   vkEnumeratePhysicalDevices   vk _ instance   vk _ physicalDevicesCount   vk _ physicalDevices   data   VkResult   VK _ SUCCESS   throw   std   exception   failed   to   get   physical   devices   if   vk _ physicalDevices   empty   throw   std   exception   no   physical   devices   vk _ physicalDevice   vk _ physicalDevices   0   а   теперь   интересный   момент   некоторый   слой   мочь   ругаться   если   при   дальнейший   работа   мы   не   перечислять   свойство   семейство   очередь   физический   устройство   вообще   говорить   наш   приложение   должно   опираться   на   этот   информация   но   т   к   материал   всего   лишь   обучать   мы   умышленно   упускать   это   из   вид   и   просто   перечислять   свойство   std   vector   VkQueueFamilyProperties   vk _ physicalDeviceQueueFamilyProperties   uint32 _ t   vk _ physicalDeviceQueueFamilyPropertiesCount   vkGetPhysicalDeviceQueueFamilyProperties   vk _ physicalDevice   vk _ physicalDeviceQueueFamilyPropertiesCount   nullptr   vk _ physicalDeviceQueueFamilyProperties   resize   vk _ physicalDeviceQueueFamilyPropertiesCount   vkGetPhysicalDeviceQueueFamilyProperties   vk _ physicalDevice   vk _ physicalDeviceQueueFamilyPropertiesCount   vk _ physicalDeviceQueueFamilyProperties   data   страница   1   2   3   4   5   6   7   следующий   Vulkan   основа   15   сентябрь   2016   комментарий   69   убирать   реклама   в   вулкан   можно   зарабатывать   vulkanslot1   net   только   в   официальный   версия   сайт   контакт   сообщество   участник   каталог   сайт   категория   архив   новость   GameDev   ru   разработка   игра   2001   2019