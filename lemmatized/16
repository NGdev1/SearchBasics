   писать   отладчик   для   lua   5   1   общий   статья   программирование   игра   новость   статья   код   арт   дизайн   индустрия   подсказка   термин   faq   страница   сообщество   форум   качалка   участник   пользователь   темный   тема   публикация   проект   форум   работа   входить   программированиестатьиобщий   писать   отладчик   для   lua   5   1   автор   ex   в   современный   игра   достаточно   многое   отдаваться   на   откуп   скрипт   самый   распространенный   и   часто   использовать   для   это   скриптовый   язык   являться   lua   удобный   синтаксис   хороший   скорость   особенно   при   использование   luajit   кроссплатформенность   lua   использоваться   в   проект   любой   масштаб   от   небольшой   аркада   до   монстр   вроде   world   of   warcraft   введение   breakpoints   call   stack   watch   послесловие   введение   при   написание   небольшой   скрипт   не   возникать   проблема   отладка   запись   в   лог   встроенный   проверка   синтаксис   это   достаточно   чтобы   находить   ошибка   в   код   из   сотня   строка   но   проект   разрастаться   все   много   отдаваться   на   откуп   скрипт   в   большой   проект   с   активный   использование   скрипт   без   нормальный   отладчик   не   обходиться   как   это   ни   странно   но   инструмент   для   отладка   практически   нет   я   быть   находить   два   более   менее   адекватный   внешний   отладчик   decoda   создавать   впечатление   удобный   инструмент   однако   платный   и   luaedit   opensource   до   сей   пора   не   релиз   и   не   факт   что   быть   remdebug   консольный   отладчик   последний   обновление   2006   год   из   встраивать   библиотека   ldb   не   поддерживать   с   2000   год   на   фон   такой   раздолье   не   оставаться   выбор   кроме   как   писать   свой   велосипед   информация   по   написание   отладчик   практически   нет   приходиться   копать   документация   и   собирать   по   крупинка   гугл   стабильно   предлагать   для   отладка   использовать   print   в   этот   статья   я   рассматривать   реализация   три   необходимый   для   отладка   задача   breakpoints   watch   callstack   пример   в   статья   написать   на   паскаль   так   как   работа   со   строка   в   он   просто   и   наглядно   чем   в   c   никакой   труд   не   составлять   переводить   код   на   с   или   любой   другой   язык   breakpoints   для   реализация   breakpoints   в   lua   быть   свой   инстумент   hooks   однако   я   отказываться   от   его   использование   по   два   причина   1   так   и   не   удаваться   заставлять   он   работать   вроде   бы   все   просто   вызов   lua _ sethook   с   maskline   обработка   hook   функция   но   сколько   не   пытаться   hook   ловить   любой   событие   кроме   hookline   2   тысяча   строка   код   отладка   маленький   функция   10   брейкпоинтов   и   хук   на   каждый   выполняему   строчка   это   явно   не   то   что   мы   нужно   сделать   по   аналогия   с   int   3   при   загрузка   скрипт   в   нужный   мы   место   вставлять   вызов   наш   функция   debug _ breakpoint   id   где   id   номер   брейкпоинт   в   наш   внутренний   список   в   отличие   от   нормальный   дебагер   у   мы   получаться   два   тип   брейкпоинтов   обычный   и   фоновый   обычный   брейкпоинт   ничто   не   отличаться   от   все   привычный   брейкпонит   в   классический   отладчик   фоновый   это   для   трассировка   так   как   у   мы   нет   возможность   сделать   нормальный   трассировка   также   фоновый   мы   мочь   в   реальный   время   заменять   на   обычный   без   перезагрузка   скрипт   debug _ breakpoint   в   случай   если   активный   брейкпоинт   с   номер   id   или   сейчас   идти   трассировка   выполнять   нужный   операция   заполнение   call   stack   обновление   watch   переменный   остановка   весь   процесс   в   движок   кроме   обработка   окно   дебаггер   call   stack   логика   получение   список   вызов   достаточно   простой   нужно   просматривать   стек   и   вычленять   из   он   функция   в   библиотека   debug   быть   готовый   функция   debug   traceback   но   она   доступный   только   в   скрипт   по   неизвестный   причина   в   luaapi   она   не   вынести   конечно   можно   вызывать   lua   функция   и   забирать   результат   но   это   не   похожий   на   хороший   решение   хотя   traceback   и   не   реализовать   на   уровень   luaapi   его   реализация   можно   сделать   самостоятельно   с   помощь   другой   функция   luaapi   с   помощь   функци   lua _ getstack   в   цикл   получать   информация   об   уровень   выполнение   начинать   с   1   вообще   стек   индексироваться   с   0   но   0   это   debug _ breakpoint   информация   о   он   мы   получать   не   нужно   и   до   тот   пора   пока   lua _ getstack   не   вернуть   0   до   тот   пора   пока   стек   не   кончаться   lua _ getstack   быть   возвращать   1   от   lua _ getstack   мы   нужно   заполнение   структура   lua _ debug   который   мы   передавать   в   lua _ getinfo   параметр   what   должный   содержать   символ   sn   s   для   заполнение   информация   по   исходный   код   n   для   заполнение   информация   об   имя   код   функция   быть   примерно   такой   procedure   luatraceback   luastate   pointer   list   tcallstacklist   var   level   integer   ar   lua _ debug   item   tcallstacklistitem   begin   level   1   while   lua _ getstack   luastate   level   ar   1   do   begin   lua _ getinfo   luastate   sn   ar   if   ar   name   nil   then   item   functionname   ar   name   else   item   functionname   unknown   if   ar   namewhat   nil   then   item   functiontype   ar   namewhat   else   item   functiontype   unknown   item   runtype   ar   what   item   chunkname   ar   source   list   add   item   inc   level   end   end   lua _ debug   name   этот   имя   функция   если   определять   имя   функция   невозможно   nil   lua _ debug   namewhat   это   где   функция   определять   метод   таблица   поле   таблица   в   корень   и   т   п   lua _ debug   what   это   среда   исполнение   мочь   быть   lua   или   c   lua _ debug   source   это   место   где   определять   исходный   код   если   код   загружать   из   файл   то   это   имя   файл   если   из   память   то   имя   чанка   watch   реализация   слежение   за   переменный   достаточно   простой   никакой   костыль   придумывать   не   приходиться   весь   нужный   инструментарий   предоставлять   luaapi   думать   что   с   задача   распарсить   на   часть   строка   вид   self   objects   0   caption   вы   справляться   сам   в   watch   мы   хотеть   иметь   доступ   к   глобальный   переменный   аргумент   функция   и   локальный   переменный   аргумент   функция   относиться   к   локальный   переменный   так   что   обрабатываться   они   вместе   как   и   при   обычный   работа   с   переменный   наш   задача   помещать   переменный   на   вершина   стек   из   она   получать   новый   переменная   и   помещать   она   на   вершина   стек   и   так   пока   не   доходить   до   последний   переменная   в   выражение   с   глобальный   переменный   весь   просто   работать   как   и   всегда   а   вот   с   локальный   сложно   дело   в   то   что   мы   зайти   в   брейкпоинт   с   помощь   функция   debug _ breakpoint   а   значит   в   стек   лежать   переменный   принадлежать   этот   функция   а   отлаживать   функция   находиться   на   стек   на   уровень   высокий   и   обычный   средство   недоступный   к   счастие   luaapi   предоставлять   доступ   к   любой   уровень   на   стек   с   помощь   уже   известный   функция   lua _ getstack   тогда   функция   для   вынесение   локальный   переменный   на   вершина   стек   быть   выглядеть   так   function   luagetlocalvariable   luastate   pointer   const   name   string   boolean   var   ar   lua _ debug   varname   pchar   current   integer   begin   result   false   if   lua _ getstack   luastate   1   ar   1   then   begin   вообще   все   сломаться   почему   то   если   getstack   не   срабатывать   твориться   что   то   очень   плохой   exit   end   current   1   varname   lua _ getlocal   luastate   ar   current   while   varname   nil   do   begin   if   varname   name   then   begin   result   true   получать   нужный   переменная   на   вершина   стек   возвращать   true   и   выходить   exit   end   lua _ pop   luastate   1   это   не   тот   переменный   который   мы   нужный   убирать   она   с   вершина   стек   varname   lua _ getlocal   luastate   ar   current   inc   current   end   end   послесловие   что   получаться   у   я   после   использование   все   высокий   описывать   вы   мочь   увидеть   в   видео   располагать   ниже   любой   вопрос   дополнение   и   исправление   вы   мочь   писать   в   комментарий   к   статья   как   выясняться   поздно   хук   на   строка   не   ставиться   из   за   использование   luajit   если   использовать   для   отладка   обычный   lua   библиотека   хук   работать   в   штатный   режим   иметь   смысл   делать   хук   стандартный   способ   скорость   работа   существенно   падать   но   зато   расти   эффективность   отладка   debugger   lua   отладка   скрипт   27   апрель   2011   обновление   26   окт   2011   комментарий   25   убирать   реклама   контакт   сообщество   участник   каталог   сайт   категория   архив   новость   gamedev   ru   разработка   игра   2001   2019